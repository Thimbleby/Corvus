// 02-orders.js
//
//
//
// allPuzzleTypes format: [[GridSizeX, GridSizeY], [Graphical Options], [Logical options], [Layouts], [Answer Layouts], [# starter/full grid], [Answer #variations], #Concealed, Type]
// Graphical Options.length = Logical Options.length = Number of Pattern types used.
//
// *****
// Graphical Options
// 0 - Annulus
// 1 - Dice
// 2 - Petals
// 3 - Spike Rings
// 4 - Tessellating Squares
// 5 - Tessellating Triangles
// 6 - BoxLines
//
// *****
// Logical Options
// 0 - Identity
//
// 1 - 123
// 2 - 112
//
// 3 - Addition
//
// 4 - AND						Commutative
// 5 - OR						Commutative
// 6 - XOR						Commutative
// 7 - XNOR						Commutative
// 8 - NOR						Symmetric
// 9 - NAND						Symmetric
// 10 - ANDNOT					Non-trivial
// 11 - NANDNOT					Non-trivial
// 12 - ORNOT					Non-trivial
// 13 - NORNOT					Non-trivial
// 14 - IFY						Non-trivial
// 15 - IFNY					Non-trivial
// 16 - IFX						Non-trivial
// 17 - IFNX					Non-trivial
// 
// 18 - Magic Squares
// 19 - Basic Symmetry
// 20 - Rotational Symmetry
// 21 - Tessellation
// 22 - Karnaugh Maps
//
// For logic gates: Commutative >> Symmetric >> Non-trivial
//
// *****
// Layout
// One large uncertainty in the order of possibleLayouts is whether [threeOrFour()] is more 
// complex than [1,2] or not. Screen complexity vs puzzle complexity.
// For further uncertainties, see the 'Odd Ball' categories.
// 			
// Uses the format [Scale,[Colour, Form, Rotation],[Colour, Form, Rotation]]
// The outer annuli uses the first array [Colour, Form, Rotation], and the inner annulus uses the second array
// Scale is uniform across annuli
//
// *****
// Number of elements in central icon - determines size of Number grid.
// Mostly used for logic gate Rules.
//
// *****
// Number grid
// THIS TEXT IS INSUFFICIENT OR WRONG
// ALL number patterns must have more than 1 example. 3-4 examples should be better.
// Columns and rows must sum |x| < 9 & total sum must be |x| < 9
// Combined with shade alterations, negatives can be quite hard.
//
// *****
// #Concealed
// 0 = No missing Icons
// 1 = Up to 1 missing Icon
// 2 = Up to 2 missing Icons 
// 3 = Up to 3 missing Icons
// 4 = Up to 4 missing Icons
// NOT INCLUDING '?'
//
// *****
// Type
// 0 - Missing Icon
// 1 - Wrong Icon
// 
// N.b. Grid size is currently fixed as square.
//
// random generators
//maxDif = 10;
//anomUpperBound = 0.6*maxDif; // (inverted)
//anulusUpperBound = 0.2*maxDif; // (inverted)
//difficulty = 3300;

function shuffle(array) {
  var currentIndex = array.length, temporaryValue, randomIndex;

  // While there remain elements to shuffle...
  while (0 !== currentIndex) {

    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

// the following quote calculates annulusRuleArray, 
// however as generally it doesn't change, annulusRuleArray has been hard coded 
// to the result of that calculation following this comment.
// anulusRuleArray currently doesn't generate identities. It aught to at some point, but this will be added manually for the moment.
/*annulusRuleArray = [];

var done = false;
var loopWarning = 0;
function uniq(value, index, self) { 
	//console.log(self);
	//console.log(value + ", "+ self.length);
	var firstIndex = -1;
	for (var x = 0; x < index; x++) {
		var stop = true;
		for (var y = 0; y < value.length; y++) {
			if (self[x][y] != value[y]) {
				stop = false;
				break;
			}
		}
		if (stop) {
			firstIndex = x
			break;
		}
	}
	if (firstIndex == -1){
		return true;
	}
    return false;
}
function permutator(inputArr) {
  var results = [];

  function permute(arr, memo) {
    var cur, memo = memo || [];

    for (var i = 0; i < arr.length; i++) {
      cur = arr.splice(i, 1);
      if (arr.length === 0) {
        results.push(memo.concat(cur));
      }
      permute(arr.slice(), memo.concat(cur));
      arr.splice(i, 0, cur[0]);
    }
	results = results.filter(uniq)
    return results;
  }

  return permute(inputArr);
}

function annulusIsSame (array1, array2) {
	if (array1.length != array2.length)
		return false;
	if (array1[0] != array2[0])
		return false;
	for (var x = 1; x < array1.length; x++) {
		if (Array.isArray(array1[x]) && Array.isArray(array2[x]))
			return false;
		if (array1[x].length != array2[x].length)
			return false;
		for (var y = 0; y < array1[x].length; y++) {
			if (array1[x][y] != array2[x][y])
				return false;
		}
	}
	return true;
}

function araPush (array) {
	//console.log("array: "+array);
	// formats and pushes unique test item designs to the array
	a = array[0];
	s = array[1];
	c1 = array[2];
	f1 = array[3];
	r1 = array[4];
	c2 = array[5];
	f2 = array[6];
	r2 = array[7];
	if (a < 2)
			var temp2 = [s,[c1,f1,r1]];
		else
			var temp2 = [s,[c1,f1,r1],[c2,f2,r2]];
	//console.log("temp2: "+ returnStringArray(temp2));
	// double check if annulus Rule Array already contains temp2
	var isntAlreadyDone = true;
	for (var x = 0; x < annulusRuleArray.length; x++) {
		if (annulusIsSame(annulusRuleArray[x], temp2)) {
			isntAlreadyDone = false;
			break;
		}
	}
	// if then add temp2 to the array
	if (isntAlreadyDone) {
		annulusRuleArray.push(temp2);
		//console.log(annulusRuleArray);
	}
}

function sumTemp (temporary) {
	console.log("sumTemp");
	// improved sumTemp - handles Identity, H/V & DD/ID.
	var tempCounter = [0,0,0];
	var tempLength = 4;
	if (a == 2)
		tempLength = 7;
	for (var x = 0; x < tempLength; x++) {
		if (temporary[x] == 1)
			tempCounter[1]++;
		else if (temporary[x] == 2)
			tempCounter[2]++;
		else if (temporary[x] == 0)
			tempCounter[0]++;
	}
	return tempCounter;
}

var a = 1;
var s = 0;
var c1 = 0;
var f1 = 0;
var r1 = 0;
var c2 = 0;
var f2 = 0;
var r2 = 0;
var tempAnnulus = [a,s,c1,f1,r1,c2,f2,r2];
console.log("identity");
console.log(tempAnnulus);
//araPush(tempAnnulus); // identity
//console.log(returnStringArray(annulusRuleArray));
console.log("for loop");
for (var z = 2; z < tempAnnulus.length; z++) {
	// first ele. of tempAnnulus is the number of annuli.
	// make n. of H/V equal to z, from left to right - overwriting anything else.
	for (var y = 1; y < tempAnnulus.length; y++) {
		if (y < z)
			tempAnnulus[y] = 1;
		else
			tempAnnulus[y] = 0;
	}
	// remove the number of annuli from the array, so that it isn't shuffled in via permute.
	var tempNumberlessAnnulus = tempAnnulus.slice(1);
	// Permute, push then increment n. of DD/ID, and repeat until equal to x.
	for (var x = 0; x <= z; x++) {
		// Permute tempAnnulus
		var arrayOfShuffledTA = permutator(tempNumberlessAnnulus);
		for (var n = 0; n < arrayOfShuffledTA.length; n++) {
			// Add the number of annuli back in.
			arrayOfShuffledTA[n].unshift(0);
			// Set the number of annuli, when the second annuli aren't used
			// push once with a second set using identity and once with one set of annuli.
			for (var l = 4; l < arrayOfShuffledTA[n].length; l++) {
				if (arrayOfShuffledTA[n][l] != 0) {
					arrayOfShuffledTA[n][0] = 2;
					break;
				}
				arrayOfShuffledTA[n][0] = 1;
			}
			if (arrayOfShuffledTA[n][0] == 1) {
				// push with one annuli
				araPush(arrayOfShuffledTA[n]);
				arrayOfShuffledTA[n][0] = 2;
			}
			// push each permutation of tempAnnulus with two annuli
			araPush(arrayOfShuffledTA[n]);
		}
		// swap an additional H/V for DD/ID
		tempNumberlessAnnulus[x] = 2;
	}
	
	// increment z
	if (tempAnnulus.length > 10) {
		console.warn ("Something is adding elements to tempAnnulus.");
		break;
	}
}
console.log("annulusRuleArray:");
console.log(annulusRuleArray);
document.write(returnStringArray(annulusRuleArray));*/

annulusRuleArray = [[0,[0,0,0]],[0,[0,0,0],[0,0,0]],[1, [0, 0, 0]], [1, [0, 0, 0], [0, 0, 0]], [0, [1, 0, 0]], [0, [1, 0, 0], [0, 0, 0]], [0, [0, 1, 0]], [0, [0, 1, 0], [0, 0, 0]], [0, [0, 0, 1], [0, 0, 0]], [0, [0, 0, 0], [1, 0, 0]], [0, [0, 0, 0], [0, 1, 0]], [0, [0, 0, 0], [0, 0, 1]], [2, [0, 0, 0]], [2, [0, 0, 0], [0, 0, 0]], [0, [2, 0, 0]], [0, [2, 0, 0], [0, 0, 0]], [0, [0, 2, 0]], [0, [0, 2, 0], [0, 0, 0]], [0, [0, 0, 2], [0, 0, 0]], [0, [0, 0, 0], [2, 0, 0]], [0, [0, 0, 0], [0, 2, 0]], [0, [0, 0, 0], [0, 0, 2]], [2, [2, 0, 0]], [2, [2, 0, 0], [0, 0, 0]], [2, [0, 2, 0]], [2, [0, 2, 0], [0, 0, 0]], [2, [0, 0, 2], [0, 0, 0]], [2, [0, 0, 0], [2, 0, 0]], [2, [0, 0, 0], [0, 2, 0]], [2, [0, 0, 0], [0, 0, 2]], [0, [2, 2, 0]], [0, [2, 2, 0], [0, 0, 0]], [0, [2, 0, 2], [0, 0, 0]], [0, [2, 0, 0], [2, 0, 0]], [0, [2, 0, 0], [0, 2, 0]], [0, [2, 0, 0], [0, 0, 2]], [0, [0, 2, 2], [0, 0, 0]], [0, [0, 2, 0], [2, 0, 0]], [0, [0, 2, 0], [0, 2, 0]], [0, [0, 2, 0], [0, 0, 2]], [0, [0, 0, 2], [2, 0, 0]], [0, [0, 0, 2], [0, 2, 0]], [0, [0, 0, 2], [0, 0, 2]], [0, [0, 0, 0], [2, 2, 0]], [0, [0, 0, 0], [2, 0, 2]], [0, [0, 0, 0], [0, 2, 2]], [1, [1, 0, 0]], [1, [1, 0, 0], [0, 0, 0]], [1, [0, 1, 0]], [1, [0, 1, 0], [0, 0, 0]], [1, [0, 0, 1], [0, 0, 0]], [1, [0, 0, 0], [1, 0, 0]], [1, [0, 0, 0], [0, 1, 0]], [1, [0, 0, 0], [0, 0, 1]], [0, [1, 1, 0]], [0, [1, 1, 0], [0, 0, 0]], [0, [1, 0, 1], [0, 0, 0]], [0, [1, 0, 0], [1, 0, 0]], [0, [1, 0, 0], [0, 1, 0]], [0, [1, 0, 0], [0, 0, 1]], [0, [0, 1, 1], [0, 0, 0]], [0, [0, 1, 0], [1, 0, 0]], [0, [0, 1, 0], [0, 1, 0]], [0, [0, 1, 0], [0, 0, 1]], [0, [0, 0, 1], [1, 0, 0]], [0, [0, 0, 1], [0, 1, 0]], [0, [0, 0, 1], [0, 0, 1]], [0, [0, 0, 0], [1, 1, 0]], [0, [0, 0, 0], [1, 0, 1]], [0, [0, 0, 0], [0, 1, 1]], [2, [1, 0, 0]], [2, [1, 0, 0], [0, 0, 0]], [2, [0, 1, 0]], [2, [0, 1, 0], [0, 0, 0]], [2, [0, 0, 1], [0, 0, 0]], [2, [0, 0, 0], [1, 0, 0]], [2, [0, 0, 0], [0, 1, 0]], [2, [0, 0, 0], [0, 0, 1]], [1, [2, 0, 0]], [1, [2, 0, 0], [0, 0, 0]], [1, [0, 2, 0]], [1, [0, 2, 0], [0, 0, 0]], [1, [0, 0, 2], [0, 0, 0]], [1, [0, 0, 0], [2, 0, 0]], [1, [0, 0, 0], [0, 2, 0]], [1, [0, 0, 0], [0, 0, 2]], [0, [2, 1, 0]], [0, [2, 1, 0], [0, 0, 0]], [0, [2, 0, 1], [0, 0, 0]], [0, [2, 0, 0], [1, 0, 0]], [0, [2, 0, 0], [0, 1, 0]], [0, [2, 0, 0], [0, 0, 1]], [0, [1, 2, 0]], [0, [1, 2, 0], [0, 0, 0]], [0, [1, 0, 2], [0, 0, 0]], [0, [1, 0, 0], [2, 0, 0]], [0, [1, 0, 0], [0, 2, 0]], [0, [1, 0, 0], [0, 0, 2]], [0, [0, 2, 1], [0, 0, 0]], [0, [0, 2, 0], [1, 0, 0]], [0, [0, 2, 0], [0, 1, 0]], [0, [0, 2, 0], [0, 0, 1]], [0, [0, 1, 2], [0, 0, 0]], [0, [0, 1, 0], [2, 0, 0]], [0, [0, 1, 0], [0, 2, 0]], [0, [0, 1, 0], [0, 0, 2]], [0, [0, 0, 2], [1, 0, 0]], [0, [0, 0, 2], [0, 1, 0]], [0, [0, 0, 2], [0, 0, 1]], [0, [0, 0, 1], [2, 0, 0]], [0, [0, 0, 1], [0, 2, 0]], [0, [0, 0, 1], [0, 0, 2]], [0, [0, 0, 0], [2, 1, 0]], [0, [0, 0, 0], [2, 0, 1]], [0, [0, 0, 0], [1, 2, 0]], [0, [0, 0, 0], [1, 0, 2]], [0, [0, 0, 0], [0, 2, 1]], [0, [0, 0, 0], [0, 1, 2]], [2, [2, 0, 0]], [2, [2, 0, 0], [0, 0, 0]], [2, [0, 2, 0]], [2, [0, 2, 0], [0, 0, 0]], [2, [0, 0, 2], [0, 0, 0]], [2, [0, 0, 0], [2, 0, 0]], [2, [0, 0, 0], [0, 2, 0]], [2, [0, 0, 0], [0, 0, 2]], [0, [2, 2, 0]], [0, [2, 2, 0], [0, 0, 0]], [0, [2, 0, 2], [0, 0, 0]], [0, [2, 0, 0], [2, 0, 0]], [0, [2, 0, 0], [0, 2, 0]], [0, [2, 0, 0], [0, 0, 2]], [0, [0, 2, 2], [0, 0, 0]], [0, [0, 2, 0], [2, 0, 0]], [0, [0, 2, 0], [0, 2, 0]], [0, [0, 2, 0], [0, 0, 2]], [0, [0, 0, 2], [2, 0, 0]], [0, [0, 0, 2], [0, 2, 0]], [0, [0, 0, 2], [0, 0, 2]], [0, [0, 0, 0], [2, 2, 0]], [0, [0, 0, 0], [2, 0, 2]], [0, [0, 0, 0], [0, 2, 2]], [2, [2, 2, 0]], [2, [2, 2, 0], [0, 0, 0]], [2, [2, 0, 2], [0, 0, 0]], [2, [2, 0, 0], [2, 0, 0]], [2, [2, 0, 0], [0, 2, 0]], [2, [2, 0, 0], [0, 0, 2]], [2, [0, 2, 2], [0, 0, 0]], [2, [0, 2, 0], [2, 0, 0]], [2, [0, 2, 0], [0, 2, 0]], [2, [0, 2, 0], [0, 0, 2]], [2, [0, 0, 2], [2, 0, 0]], [2, [0, 0, 2], [0, 2, 0]], [2, [0, 0, 2], [0, 0, 2]], [2, [0, 0, 0], [2, 2, 0]], [2, [0, 0, 0], [2, 0, 2]], [2, [0, 0, 0], [0, 2, 2]], [0, [2, 2, 2], [0, 0, 0]], [0, [2, 2, 0], [2, 0, 0]], [0, [2, 2, 0], [0, 2, 0]], [0, [2, 2, 0], [0, 0, 2]], [0, [2, 0, 2], [2, 0, 0]], [0, [2, 0, 2], [0, 2, 0]], [0, [2, 0, 2], [0, 0, 2]], [0, [2, 0, 0], [2, 2, 0]], [0, [2, 0, 0], [2, 0, 2]], [0, [2, 0, 0], [0, 2, 2]], [0, [0, 2, 2], [2, 0, 0]], [0, [0, 2, 2], [0, 2, 0]], [0, [0, 2, 2], [0, 0, 2]], [0, [0, 2, 0], [2, 2, 0]], [0, [0, 2, 0], [2, 0, 2]], [0, [0, 2, 0], [0, 2, 2]], [0, [0, 0, 2], [2, 2, 0]], [0, [0, 0, 2], [2, 0, 2]], [0, [0, 0, 2], [0, 2, 2]], [0, [0, 0, 0], [2, 2, 2]], [1, [1, 1, 0]], [1, [1, 1, 0], [0, 0, 0]], [1, [1, 0, 1], [0, 0, 0]], [1, [1, 0, 0], [1, 0, 0]], [1, [1, 0, 0], [0, 1, 0]], [1, [1, 0, 0], [0, 0, 1]], [1, [0, 1, 1], [0, 0, 0]], [1, [0, 1, 0], [1, 0, 0]], [1, [0, 1, 0], [0, 1, 0]], [1, [0, 1, 0], [0, 0, 1]], [1, [0, 0, 1], [1, 0, 0]], [1, [0, 0, 1], [0, 1, 0]], [1, [0, 0, 1], [0, 0, 1]], [1, [0, 0, 0], [1, 1, 0]], [1, [0, 0, 0], [1, 0, 1]], [1, [0, 0, 0], [0, 1, 1]], [0, [1, 1, 1], [0, 0, 0]], [0, [1, 1, 0], [1, 0, 0]], [0, [1, 1, 0], [0, 1, 0]], [0, [1, 1, 0], [0, 0, 1]], [0, [1, 0, 1], [1, 0, 0]], [0, [1, 0, 1], [0, 1, 0]], [0, [1, 0, 1], [0, 0, 1]], [0, [1, 0, 0], [1, 1, 0]], [0, [1, 0, 0], [1, 0, 1]], [0, [1, 0, 0], [0, 1, 1]], [0, [0, 1, 1], [1, 0, 0]], [0, [0, 1, 1], [0, 1, 0]], [0, [0, 1, 1], [0, 0, 1]], [0, [0, 1, 0], [1, 1, 0]], [0, [0, 1, 0], [1, 0, 1]], [0, [0, 1, 0], [0, 1, 1]], [0, [0, 0, 1], [1, 1, 0]], [0, [0, 0, 1], [1, 0, 1]], [0, [0, 0, 1], [0, 1, 1]], [0, [0, 0, 0], [1, 1, 1]], [2, [1, 1, 0]], [2, [1, 1, 0], [0, 0, 0]], [2, [1, 0, 1], [0, 0, 0]], [2, [1, 0, 0], [1, 0, 0]], [2, [1, 0, 0], [0, 1, 0]], [2, [1, 0, 0], [0, 0, 1]], [2, [0, 1, 1], [0, 0, 0]], [2, [0, 1, 0], [1, 0, 0]], [2, [0, 1, 0], [0, 1, 0]], [2, [0, 1, 0], [0, 0, 1]], [2, [0, 0, 1], [1, 0, 0]], [2, [0, 0, 1], [0, 1, 0]], [2, [0, 0, 1], [0, 0, 1]], [2, [0, 0, 0], [1, 1, 0]], [2, [0, 0, 0], [1, 0, 1]], [2, [0, 0, 0], [0, 1, 1]], [1, [2, 1, 0]], [1, [2, 1, 0], [0, 0, 0]], [1, [2, 0, 1], [0, 0, 0]], [1, [2, 0, 0], [1, 0, 0]], [1, [2, 0, 0], [0, 1, 0]], [1, [2, 0, 0], [0, 0, 1]], [1, [1, 2, 0]], [1, [1, 2, 0], [0, 0, 0]], [1, [1, 0, 2], [0, 0, 0]], [1, [1, 0, 0], [2, 0, 0]], [1, [1, 0, 0], [0, 2, 0]], [1, [1, 0, 0], [0, 0, 2]], [1, [0, 2, 1], [0, 0, 0]], [1, [0, 2, 0], [1, 0, 0]], [1, [0, 2, 0], [0, 1, 0]], [1, [0, 2, 0], [0, 0, 1]], [1, [0, 1, 2], [0, 0, 0]], [1, [0, 1, 0], [2, 0, 0]], [1, [0, 1, 0], [0, 2, 0]], [1, [0, 1, 0], [0, 0, 2]], [1, [0, 0, 2], [1, 0, 0]], [1, [0, 0, 2], [0, 1, 0]], [1, [0, 0, 2], [0, 0, 1]], [1, [0, 0, 1], [2, 0, 0]], [1, [0, 0, 1], [0, 2, 0]], [1, [0, 0, 1], [0, 0, 2]], [1, [0, 0, 0], [2, 1, 0]], [1, [0, 0, 0], [2, 0, 1]], [1, [0, 0, 0], [1, 2, 0]], [1, [0, 0, 0], [1, 0, 2]], [1, [0, 0, 0], [0, 2, 1]], [1, [0, 0, 0], [0, 1, 2]], [0, [2, 1, 1], [0, 0, 0]], [0, [2, 1, 0], [1, 0, 0]], [0, [2, 1, 0], [0, 1, 0]], [0, [2, 1, 0], [0, 0, 1]], [0, [2, 0, 1], [1, 0, 0]], [0, [2, 0, 1], [0, 1, 0]], [0, [2, 0, 1], [0, 0, 1]], [0, [2, 0, 0], [1, 1, 0]], [0, [2, 0, 0], [1, 0, 1]], [0, [2, 0, 0], [0, 1, 1]], [0, [1, 2, 1], [0, 0, 0]], [0, [1, 2, 0], [1, 0, 0]], [0, [1, 2, 0], [0, 1, 0]], [0, [1, 2, 0], [0, 0, 1]], [0, [1, 1, 2], [0, 0, 0]], [0, [1, 1, 0], [2, 0, 0]], [0, [1, 1, 0], [0, 2, 0]], [0, [1, 1, 0], [0, 0, 2]], [0, [1, 0, 2], [1, 0, 0]], [0, [1, 0, 2], [0, 1, 0]], [0, [1, 0, 2], [0, 0, 1]], [0, [1, 0, 1], [2, 0, 0]], [0, [1, 0, 1], [0, 2, 0]], [0, [1, 0, 1], [0, 0, 2]], [0, [1, 0, 0], [2, 1, 0]], [0, [1, 0, 0], [2, 0, 1]], [0, [1, 0, 0], [1, 2, 0]], [0, [1, 0, 0], [1, 0, 2]], [0, [1, 0, 0], [0, 2, 1]], [0, [1, 0, 0], [0, 1, 2]], [0, [0, 2, 1], [1, 0, 0]], [0, [0, 2, 1], [0, 1, 0]], [0, [0, 2, 1], [0, 0, 1]], [0, [0, 2, 0], [1, 1, 0]], [0, [0, 2, 0], [1, 0, 1]], [0, [0, 2, 0], [0, 1, 1]], [0, [0, 1, 2], [1, 0, 0]], [0, [0, 1, 2], [0, 1, 0]], [0, [0, 1, 2], [0, 0, 1]], [0, [0, 1, 1], [2, 0, 0]], [0, [0, 1, 1], [0, 2, 0]], [0, [0, 1, 1], [0, 0, 2]], [0, [0, 1, 0], [2, 1, 0]], [0, [0, 1, 0], [2, 0, 1]], [0, [0, 1, 0], [1, 2, 0]], [0, [0, 1, 0], [1, 0, 2]], [0, [0, 1, 0], [0, 2, 1]], [0, [0, 1, 0], [0, 1, 2]], [0, [0, 0, 2], [1, 1, 0]], [0, [0, 0, 2], [1, 0, 1]], [0, [0, 0, 2], [0, 1, 1]], [0, [0, 0, 1], [2, 1, 0]], [0, [0, 0, 1], [2, 0, 1]], [0, [0, 0, 1], [1, 2, 0]], [0, [0, 0, 1], [1, 0, 2]], [0, [0, 0, 1], [0, 2, 1]], [0, [0, 0, 1], [0, 1, 2]], [0, [0, 0, 0], [2, 1, 1]], [0, [0, 0, 0], [1, 2, 1]], [0, [0, 0, 0], [1, 1, 2]], [2, [2, 1, 0]], [2, [2, 1, 0], [0, 0, 0]], [2, [2, 0, 1], [0, 0, 0]], [2, [2, 0, 0], [1, 0, 0]], [2, [2, 0, 0], [0, 1, 0]], [2, [2, 0, 0], [0, 0, 1]], [2, [1, 2, 0]], [2, [1, 2, 0], [0, 0, 0]], [2, [1, 0, 2], [0, 0, 0]], [2, [1, 0, 0], [2, 0, 0]], [2, [1, 0, 0], [0, 2, 0]], [2, [1, 0, 0], [0, 0, 2]], [2, [0, 2, 1], [0, 0, 0]], [2, [0, 2, 0], [1, 0, 0]], [2, [0, 2, 0], [0, 1, 0]], [2, [0, 2, 0], [0, 0, 1]], [2, [0, 1, 2], [0, 0, 0]], [2, [0, 1, 0], [2, 0, 0]], [2, [0, 1, 0], [0, 2, 0]], [2, [0, 1, 0], [0, 0, 2]], [2, [0, 0, 2], [1, 0, 0]], [2, [0, 0, 2], [0, 1, 0]], [2, [0, 0, 2], [0, 0, 1]], [2, [0, 0, 1], [2, 0, 0]], [2, [0, 0, 1], [0, 2, 0]], [2, [0, 0, 1], [0, 0, 2]], [2, [0, 0, 0], [2, 1, 0]], [2, [0, 0, 0], [2, 0, 1]], [2, [0, 0, 0], [1, 2, 0]], [2, [0, 0, 0], [1, 0, 2]], [2, [0, 0, 0], [0, 2, 1]], [2, [0, 0, 0], [0, 1, 2]], [1, [2, 2, 0]], [1, [2, 2, 0], [0, 0, 0]], [1, [2, 0, 2], [0, 0, 0]], [1, [2, 0, 0], [2, 0, 0]], [1, [2, 0, 0], [0, 2, 0]], [1, [2, 0, 0], [0, 0, 2]], [1, [0, 2, 2], [0, 0, 0]], [1, [0, 2, 0], [2, 0, 0]], [1, [0, 2, 0], [0, 2, 0]], [1, [0, 2, 0], [0, 0, 2]], [1, [0, 0, 2], [2, 0, 0]], [1, [0, 0, 2], [0, 2, 0]], [1, [0, 0, 2], [0, 0, 2]], [1, [0, 0, 0], [2, 2, 0]], [1, [0, 0, 0], [2, 0, 2]], [1, [0, 0, 0], [0, 2, 2]], [0, [2, 2, 1], [0, 0, 0]], [0, [2, 2, 0], [1, 0, 0]], [0, [2, 2, 0], [0, 1, 0]], [0, [2, 2, 0], [0, 0, 1]], [0, [2, 1, 2], [0, 0, 0]], [0, [2, 1, 0], [2, 0, 0]], [0, [2, 1, 0], [0, 2, 0]], [0, [2, 1, 0], [0, 0, 2]], [0, [2, 0, 2], [1, 0, 0]], [0, [2, 0, 2], [0, 1, 0]], [0, [2, 0, 2], [0, 0, 1]], [0, [2, 0, 1], [2, 0, 0]], [0, [2, 0, 1], [0, 2, 0]], [0, [2, 0, 1], [0, 0, 2]], [0, [2, 0, 0], [2, 1, 0]], [0, [2, 0, 0], [2, 0, 1]], [0, [2, 0, 0], [1, 2, 0]], [0, [2, 0, 0], [1, 0, 2]], [0, [2, 0, 0], [0, 2, 1]], [0, [2, 0, 0], [0, 1, 2]], [0, [1, 2, 2], [0, 0, 0]], [0, [1, 2, 0], [2, 0, 0]], [0, [1, 2, 0], [0, 2, 0]], [0, [1, 2, 0], [0, 0, 2]], [0, [1, 0, 2], [2, 0, 0]], [0, [1, 0, 2], [0, 2, 0]], [0, [1, 0, 2], [0, 0, 2]], [0, [1, 0, 0], [2, 2, 0]], [0, [1, 0, 0], [2, 0, 2]], [0, [1, 0, 0], [0, 2, 2]], [0, [0, 2, 2], [1, 0, 0]], [0, [0, 2, 2], [0, 1, 0]], [0, [0, 2, 2], [0, 0, 1]], [0, [0, 2, 1], [2, 0, 0]], [0, [0, 2, 1], [0, 2, 0]], [0, [0, 2, 1], [0, 0, 2]], [0, [0, 2, 0], [2, 1, 0]], [0, [0, 2, 0], [2, 0, 1]], [0, [0, 2, 0], [1, 2, 0]], [0, [0, 2, 0], [1, 0, 2]], [0, [0, 2, 0], [0, 2, 1]], [0, [0, 2, 0], [0, 1, 2]], [0, [0, 1, 2], [2, 0, 0]], [0, [0, 1, 2], [0, 2, 0]], [0, [0, 1, 2], [0, 0, 2]], [0, [0, 1, 0], [2, 2, 0]], [0, [0, 1, 0], [2, 0, 2]], [0, [0, 1, 0], [0, 2, 2]], [0, [0, 0, 2], [2, 1, 0]], [0, [0, 0, 2], [2, 0, 1]], [0, [0, 0, 2], [1, 2, 0]], [0, [0, 0, 2], [1, 0, 2]], [0, [0, 0, 2], [0, 2, 1]], [0, [0, 0, 2], [0, 1, 2]], [0, [0, 0, 1], [2, 2, 0]], [0, [0, 0, 1], [2, 0, 2]], [0, [0, 0, 1], [0, 2, 2]], [0, [0, 0, 0], [2, 2, 1]], [0, [0, 0, 0], [2, 1, 2]], [0, [0, 0, 0], [1, 2, 2]], [2, [2, 2, 0]], [2, [2, 2, 0], [0, 0, 0]], [2, [2, 0, 2], [0, 0, 0]], [2, [2, 0, 0], [2, 0, 0]], [2, [2, 0, 0], [0, 2, 0]], [2, [2, 0, 0], [0, 0, 2]], [2, [0, 2, 2], [0, 0, 0]], [2, [0, 2, 0], [2, 0, 0]], [2, [0, 2, 0], [0, 2, 0]], [2, [0, 2, 0], [0, 0, 2]], [2, [0, 0, 2], [2, 0, 0]], [2, [0, 0, 2], [0, 2, 0]], [2, [0, 0, 2], [0, 0, 2]], [2, [0, 0, 0], [2, 2, 0]], [2, [0, 0, 0], [2, 0, 2]], [2, [0, 0, 0], [0, 2, 2]], [0, [2, 2, 2], [0, 0, 0]], [0, [2, 2, 0], [2, 0, 0]], [0, [2, 2, 0], [0, 2, 0]], [0, [2, 2, 0], [0, 0, 2]], [0, [2, 0, 2], [2, 0, 0]], [0, [2, 0, 2], [0, 2, 0]], [0, [2, 0, 2], [0, 0, 2]], [0, [2, 0, 0], [2, 2, 0]], [0, [2, 0, 0], [2, 0, 2]], [0, [2, 0, 0], [0, 2, 2]], [0, [0, 2, 2], [2, 0, 0]], [0, [0, 2, 2], [0, 2, 0]], [0, [0, 2, 2], [0, 0, 2]], [0, [0, 2, 0], [2, 2, 0]], [0, [0, 2, 0], [2, 0, 2]], [0, [0, 2, 0], [0, 2, 2]], [0, [0, 0, 2], [2, 2, 0]], [0, [0, 0, 2], [2, 0, 2]], [0, [0, 0, 2], [0, 2, 2]], [0, [0, 0, 0], [2, 2, 2]], [2, [2, 2, 2], [0, 0, 0]], [2, [2, 2, 0], [2, 0, 0]], [2, [2, 2, 0], [0, 2, 0]], [2, [2, 2, 0], [0, 0, 2]], [2, [2, 0, 2], [2, 0, 0]], [2, [2, 0, 2], [0, 2, 0]], [2, [2, 0, 2], [0, 0, 2]], [2, [2, 0, 0], [2, 2, 0]], [2, [2, 0, 0], [2, 0, 2]], [2, [2, 0, 0], [0, 2, 2]], [2, [0, 2, 2], [2, 0, 0]], [2, [0, 2, 2], [0, 2, 0]], [2, [0, 2, 2], [0, 0, 2]], [2, [0, 2, 0], [2, 2, 0]], [2, [0, 2, 0], [2, 0, 2]], [2, [0, 2, 0], [0, 2, 2]], [2, [0, 0, 2], [2, 2, 0]], [2, [0, 0, 2], [2, 0, 2]], [2, [0, 0, 2], [0, 2, 2]], [2, [0, 0, 0], [2, 2, 2]], [0, [2, 2, 2], [2, 0, 0]], [0, [2, 2, 2], [0, 2, 0]], [0, [2, 2, 2], [0, 0, 2]], [0, [2, 2, 0], [2, 2, 0]], [0, [2, 2, 0], [2, 0, 2]], [0, [2, 2, 0], [0, 2, 2]], [0, [2, 0, 2], [2, 2, 0]], [0, [2, 0, 2], [2, 0, 2]], [0, [2, 0, 2], [0, 2, 2]], [0, [2, 0, 0], [2, 2, 2]], [0, [0, 2, 2], [2, 2, 0]], [0, [0, 2, 2], [2, 0, 2]], [0, [0, 2, 2], [0, 2, 2]], [0, [0, 2, 0], [2, 2, 2]], [0, [0, 0, 2], [2, 2, 2]], [1, [1, 1, 1], [0, 0, 0]], [1, [1, 1, 0], [1, 0, 0]], [1, [1, 1, 0], [0, 1, 0]], [1, [1, 1, 0], [0, 0, 1]], [1, [1, 0, 1], [1, 0, 0]], [1, [1, 0, 1], [0, 1, 0]], [1, [1, 0, 1], [0, 0, 1]], [1, [1, 0, 0], [1, 1, 0]], [1, [1, 0, 0], [1, 0, 1]], [1, [1, 0, 0], [0, 1, 1]], [1, [0, 1, 1], [1, 0, 0]], [1, [0, 1, 1], [0, 1, 0]], [1, [0, 1, 1], [0, 0, 1]], [1, [0, 1, 0], [1, 1, 0]], [1, [0, 1, 0], [1, 0, 1]], [1, [0, 1, 0], [0, 1, 1]], [1, [0, 0, 1], [1, 1, 0]], [1, [0, 0, 1], [1, 0, 1]], [1, [0, 0, 1], [0, 1, 1]], [1, [0, 0, 0], [1, 1, 1]], [0, [1, 1, 1], [1, 0, 0]], [0, [1, 1, 1], [0, 1, 0]], [0, [1, 1, 1], [0, 0, 1]], [0, [1, 1, 0], [1, 1, 0]], [0, [1, 1, 0], [1, 0, 1]], [0, [1, 1, 0], [0, 1, 1]], [0, [1, 0, 1], [1, 1, 0]], [0, [1, 0, 1], [1, 0, 1]], [0, [1, 0, 1], [0, 1, 1]], [0, [1, 0, 0], [1, 1, 1]], [0, [0, 1, 1], [1, 1, 0]], [0, [0, 1, 1], [1, 0, 1]], [0, [0, 1, 1], [0, 1, 1]], [0, [0, 1, 0], [1, 1, 1]], [0, [0, 0, 1], [1, 1, 1]], [2, [1, 1, 1], [0, 0, 0]], [2, [1, 1, 0], [1, 0, 0]], [2, [1, 1, 0], [0, 1, 0]], [2, [1, 1, 0], [0, 0, 1]], [2, [1, 0, 1], [1, 0, 0]], [2, [1, 0, 1], [0, 1, 0]], [2, [1, 0, 1], [0, 0, 1]], [2, [1, 0, 0], [1, 1, 0]], [2, [1, 0, 0], [1, 0, 1]], [2, [1, 0, 0], [0, 1, 1]], [2, [0, 1, 1], [1, 0, 0]], [2, [0, 1, 1], [0, 1, 0]], [2, [0, 1, 1], [0, 0, 1]], [2, [0, 1, 0], [1, 1, 0]], [2, [0, 1, 0], [1, 0, 1]], [2, [0, 1, 0], [0, 1, 1]], [2, [0, 0, 1], [1, 1, 0]], [2, [0, 0, 1], [1, 0, 1]], [2, [0, 0, 1], [0, 1, 1]], [2, [0, 0, 0], [1, 1, 1]], [1, [2, 1, 1], [0, 0, 0]], [1, [2, 1, 0], [1, 0, 0]], [1, [2, 1, 0], [0, 1, 0]], [1, [2, 1, 0], [0, 0, 1]], [1, [2, 0, 1], [1, 0, 0]], [1, [2, 0, 1], [0, 1, 0]], [1, [2, 0, 1], [0, 0, 1]], [1, [2, 0, 0], [1, 1, 0]], [1, [2, 0, 0], [1, 0, 1]], [1, [2, 0, 0], [0, 1, 1]], [1, [1, 2, 1], [0, 0, 0]], [1, [1, 2, 0], [1, 0, 0]], [1, [1, 2, 0], [0, 1, 0]], [1, [1, 2, 0], [0, 0, 1]], [1, [1, 1, 2], [0, 0, 0]], [1, [1, 1, 0], [2, 0, 0]], [1, [1, 1, 0], [0, 2, 0]], [1, [1, 1, 0], [0, 0, 2]], [1, [1, 0, 2], [1, 0, 0]], [1, [1, 0, 2], [0, 1, 0]], [1, [1, 0, 2], [0, 0, 1]], [1, [1, 0, 1], [2, 0, 0]], [1, [1, 0, 1], [0, 2, 0]], [1, [1, 0, 1], [0, 0, 2]], [1, [1, 0, 0], [2, 1, 0]], [1, [1, 0, 0], [2, 0, 1]], [1, [1, 0, 0], [1, 2, 0]], [1, [1, 0, 0], [1, 0, 2]], [1, [1, 0, 0], [0, 2, 1]], [1, [1, 0, 0], [0, 1, 2]], [1, [0, 2, 1], [1, 0, 0]], [1, [0, 2, 1], [0, 1, 0]], [1, [0, 2, 1], [0, 0, 1]], [1, [0, 2, 0], [1, 1, 0]], [1, [0, 2, 0], [1, 0, 1]], [1, [0, 2, 0], [0, 1, 1]], [1, [0, 1, 2], [1, 0, 0]], [1, [0, 1, 2], [0, 1, 0]], [1, [0, 1, 2], [0, 0, 1]], [1, [0, 1, 1], [2, 0, 0]], [1, [0, 1, 1], [0, 2, 0]], [1, [0, 1, 1], [0, 0, 2]], [1, [0, 1, 0], [2, 1, 0]], [1, [0, 1, 0], [2, 0, 1]], [1, [0, 1, 0], [1, 2, 0]], [1, [0, 1, 0], [1, 0, 2]], [1, [0, 1, 0], [0, 2, 1]], [1, [0, 1, 0], [0, 1, 2]], [1, [0, 0, 2], [1, 1, 0]], [1, [0, 0, 2], [1, 0, 1]], [1, [0, 0, 2], [0, 1, 1]], [1, [0, 0, 1], [2, 1, 0]], [1, [0, 0, 1], [2, 0, 1]], [1, [0, 0, 1], [1, 2, 0]], [1, [0, 0, 1], [1, 0, 2]], [1, [0, 0, 1], [0, 2, 1]], [1, [0, 0, 1], [0, 1, 2]], [1, [0, 0, 0], [2, 1, 1]], [1, [0, 0, 0], [1, 2, 1]], [1, [0, 0, 0], [1, 1, 2]], [0, [2, 1, 1], [1, 0, 0]], [0, [2, 1, 1], [0, 1, 0]], [0, [2, 1, 1], [0, 0, 1]], [0, [2, 1, 0], [1, 1, 0]], [0, [2, 1, 0], [1, 0, 1]], [0, [2, 1, 0], [0, 1, 1]], [0, [2, 0, 1], [1, 1, 0]], [0, [2, 0, 1], [1, 0, 1]], [0, [2, 0, 1], [0, 1, 1]], [0, [2, 0, 0], [1, 1, 1]], [0, [1, 2, 1], [1, 0, 0]], [0, [1, 2, 1], [0, 1, 0]], [0, [1, 2, 1], [0, 0, 1]], [0, [1, 2, 0], [1, 1, 0]], [0, [1, 2, 0], [1, 0, 1]], [0, [1, 2, 0], [0, 1, 1]], [0, [1, 1, 2], [1, 0, 0]], [0, [1, 1, 2], [0, 1, 0]], [0, [1, 1, 2], [0, 0, 1]], [0, [1, 1, 1], [2, 0, 0]], [0, [1, 1, 1], [0, 2, 0]], [0, [1, 1, 1], [0, 0, 2]], [0, [1, 1, 0], [2, 1, 0]], [0, [1, 1, 0], [2, 0, 1]], [0, [1, 1, 0], [1, 2, 0]], [0, [1, 1, 0], [1, 0, 2]], [0, [1, 1, 0], [0, 2, 1]], [0, [1, 1, 0], [0, 1, 2]], [0, [1, 0, 2], [1, 1, 0]], [0, [1, 0, 2], [1, 0, 1]], [0, [1, 0, 2], [0, 1, 1]], [0, [1, 0, 1], [2, 1, 0]], [0, [1, 0, 1], [2, 0, 1]], [0, [1, 0, 1], [1, 2, 0]], [0, [1, 0, 1], [1, 0, 2]], [0, [1, 0, 1], [0, 2, 1]], [0, [1, 0, 1], [0, 1, 2]], [0, [1, 0, 0], [2, 1, 1]], [0, [1, 0, 0], [1, 2, 1]], [0, [1, 0, 0], [1, 1, 2]], [0, [0, 2, 1], [1, 1, 0]], [0, [0, 2, 1], [1, 0, 1]], [0, [0, 2, 1], [0, 1, 1]], [0, [0, 2, 0], [1, 1, 1]], [0, [0, 1, 2], [1, 1, 0]], [0, [0, 1, 2], [1, 0, 1]], [0, [0, 1, 2], [0, 1, 1]], [0, [0, 1, 1], [2, 1, 0]], [0, [0, 1, 1], [2, 0, 1]], [0, [0, 1, 1], [1, 2, 0]], [0, [0, 1, 1], [1, 0, 2]], [0, [0, 1, 1], [0, 2, 1]], [0, [0, 1, 1], [0, 1, 2]], [0, [0, 1, 0], [2, 1, 1]], [0, [0, 1, 0], [1, 2, 1]], [0, [0, 1, 0], [1, 1, 2]], [0, [0, 0, 2], [1, 1, 1]], [0, [0, 0, 1], [2, 1, 1]], [0, [0, 0, 1], [1, 2, 1]], [0, [0, 0, 1], [1, 1, 2]], [2, [2, 1, 1], [0, 0, 0]], [2, [2, 1, 0], [1, 0, 0]], [2, [2, 1, 0], [0, 1, 0]], [2, [2, 1, 0], [0, 0, 1]], [2, [2, 0, 1], [1, 0, 0]], [2, [2, 0, 1], [0, 1, 0]], [2, [2, 0, 1], [0, 0, 1]], [2, [2, 0, 0], [1, 1, 0]], [2, [2, 0, 0], [1, 0, 1]], [2, [2, 0, 0], [0, 1, 1]], [2, [1, 2, 1], [0, 0, 0]], [2, [1, 2, 0], [1, 0, 0]], [2, [1, 2, 0], [0, 1, 0]], [2, [1, 2, 0], [0, 0, 1]], [2, [1, 1, 2], [0, 0, 0]], [2, [1, 1, 0], [2, 0, 0]], [2, [1, 1, 0], [0, 2, 0]], [2, [1, 1, 0], [0, 0, 2]], [2, [1, 0, 2], [1, 0, 0]], [2, [1, 0, 2], [0, 1, 0]], [2, [1, 0, 2], [0, 0, 1]], [2, [1, 0, 1], [2, 0, 0]], [2, [1, 0, 1], [0, 2, 0]], [2, [1, 0, 1], [0, 0, 2]], [2, [1, 0, 0], [2, 1, 0]], [2, [1, 0, 0], [2, 0, 1]], [2, [1, 0, 0], [1, 2, 0]], [2, [1, 0, 0], [1, 0, 2]], [2, [1, 0, 0], [0, 2, 1]], [2, [1, 0, 0], [0, 1, 2]], [2, [0, 2, 1], [1, 0, 0]], [2, [0, 2, 1], [0, 1, 0]], [2, [0, 2, 1], [0, 0, 1]], [2, [0, 2, 0], [1, 1, 0]], [2, [0, 2, 0], [1, 0, 1]], [2, [0, 2, 0], [0, 1, 1]], [2, [0, 1, 2], [1, 0, 0]], [2, [0, 1, 2], [0, 1, 0]], [2, [0, 1, 2], [0, 0, 1]], [2, [0, 1, 1], [2, 0, 0]], [2, [0, 1, 1], [0, 2, 0]], [2, [0, 1, 1], [0, 0, 2]], [2, [0, 1, 0], [2, 1, 0]], [2, [0, 1, 0], [2, 0, 1]], [2, [0, 1, 0], [1, 2, 0]], [2, [0, 1, 0], [1, 0, 2]], [2, [0, 1, 0], [0, 2, 1]], [2, [0, 1, 0], [0, 1, 2]], [2, [0, 0, 2], [1, 1, 0]], [2, [0, 0, 2], [1, 0, 1]], [2, [0, 0, 2], [0, 1, 1]], [2, [0, 0, 1], [2, 1, 0]], [2, [0, 0, 1], [2, 0, 1]], [2, [0, 0, 1], [1, 2, 0]], [2, [0, 0, 1], [1, 0, 2]], [2, [0, 0, 1], [0, 2, 1]], [2, [0, 0, 1], [0, 1, 2]], [2, [0, 0, 0], [2, 1, 1]], [2, [0, 0, 0], [1, 2, 1]], [2, [0, 0, 0], [1, 1, 2]], [1, [2, 2, 1], [0, 0, 0]], [1, [2, 2, 0], [1, 0, 0]], [1, [2, 2, 0], [0, 1, 0]], [1, [2, 2, 0], [0, 0, 1]], [1, [2, 1, 2], [0, 0, 0]], [1, [2, 1, 0], [2, 0, 0]], [1, [2, 1, 0], [0, 2, 0]], [1, [2, 1, 0], [0, 0, 2]], [1, [2, 0, 2], [1, 0, 0]], [1, [2, 0, 2], [0, 1, 0]], [1, [2, 0, 2], [0, 0, 1]], [1, [2, 0, 1], [2, 0, 0]], [1, [2, 0, 1], [0, 2, 0]], [1, [2, 0, 1], [0, 0, 2]], [1, [2, 0, 0], [2, 1, 0]], [1, [2, 0, 0], [2, 0, 1]], [1, [2, 0, 0], [1, 2, 0]], [1, [2, 0, 0], [1, 0, 2]], [1, [2, 0, 0], [0, 2, 1]], [1, [2, 0, 0], [0, 1, 2]], [1, [1, 2, 2], [0, 0, 0]], [1, [1, 2, 0], [2, 0, 0]], [1, [1, 2, 0], [0, 2, 0]], [1, [1, 2, 0], [0, 0, 2]], [1, [1, 0, 2], [2, 0, 0]], [1, [1, 0, 2], [0, 2, 0]], [1, [1, 0, 2], [0, 0, 2]], [1, [1, 0, 0], [2, 2, 0]], [1, [1, 0, 0], [2, 0, 2]], [1, [1, 0, 0], [0, 2, 2]], [1, [0, 2, 2], [1, 0, 0]], [1, [0, 2, 2], [0, 1, 0]], [1, [0, 2, 2], [0, 0, 1]], [1, [0, 2, 1], [2, 0, 0]], [1, [0, 2, 1], [0, 2, 0]], [1, [0, 2, 1], [0, 0, 2]], [1, [0, 2, 0], [2, 1, 0]], [1, [0, 2, 0], [2, 0, 1]], [1, [0, 2, 0], [1, 2, 0]], [1, [0, 2, 0], [1, 0, 2]], [1, [0, 2, 0], [0, 2, 1]], [1, [0, 2, 0], [0, 1, 2]], [1, [0, 1, 2], [2, 0, 0]], [1, [0, 1, 2], [0, 2, 0]], [1, [0, 1, 2], [0, 0, 2]], [1, [0, 1, 0], [2, 2, 0]], [1, [0, 1, 0], [2, 0, 2]], [1, [0, 1, 0], [0, 2, 2]], [1, [0, 0, 2], [2, 1, 0]], [1, [0, 0, 2], [2, 0, 1]], [1, [0, 0, 2], [1, 2, 0]], [1, [0, 0, 2], [1, 0, 2]], [1, [0, 0, 2], [0, 2, 1]], [1, [0, 0, 2], [0, 1, 2]], [1, [0, 0, 1], [2, 2, 0]], [1, [0, 0, 1], [2, 0, 2]], [1, [0, 0, 1], [0, 2, 2]], [1, [0, 0, 0], [2, 2, 1]], [1, [0, 0, 0], [2, 1, 2]], [1, [0, 0, 0], [1, 2, 2]], [0, [2, 2, 1], [1, 0, 0]], [0, [2, 2, 1], [0, 1, 0]], [0, [2, 2, 1], [0, 0, 1]], [0, [2, 2, 0], [1, 1, 0]], [0, [2, 2, 0], [1, 0, 1]], [0, [2, 2, 0], [0, 1, 1]], [0, [2, 1, 2], [1, 0, 0]], [0, [2, 1, 2], [0, 1, 0]], [0, [2, 1, 2], [0, 0, 1]], [0, [2, 1, 1], [2, 0, 0]], [0, [2, 1, 1], [0, 2, 0]], [0, [2, 1, 1], [0, 0, 2]], [0, [2, 1, 0], [2, 1, 0]], [0, [2, 1, 0], [2, 0, 1]], [0, [2, 1, 0], [1, 2, 0]], [0, [2, 1, 0], [1, 0, 2]], [0, [2, 1, 0], [0, 2, 1]], [0, [2, 1, 0], [0, 1, 2]], [0, [2, 0, 2], [1, 1, 0]], [0, [2, 0, 2], [1, 0, 1]], [0, [2, 0, 2], [0, 1, 1]], [0, [2, 0, 1], [2, 1, 0]], [0, [2, 0, 1], [2, 0, 1]], [0, [2, 0, 1], [1, 2, 0]], [0, [2, 0, 1], [1, 0, 2]], [0, [2, 0, 1], [0, 2, 1]], [0, [2, 0, 1], [0, 1, 2]], [0, [2, 0, 0], [2, 1, 1]], [0, [2, 0, 0], [1, 2, 1]], [0, [2, 0, 0], [1, 1, 2]], [0, [1, 2, 2], [1, 0, 0]], [0, [1, 2, 2], [0, 1, 0]], [0, [1, 2, 2], [0, 0, 1]], [0, [1, 2, 1], [2, 0, 0]], [0, [1, 2, 1], [0, 2, 0]], [0, [1, 2, 1], [0, 0, 2]], [0, [1, 2, 0], [2, 1, 0]], [0, [1, 2, 0], [2, 0, 1]], [0, [1, 2, 0], [1, 2, 0]], [0, [1, 2, 0], [1, 0, 2]], [0, [1, 2, 0], [0, 2, 1]], [0, [1, 2, 0], [0, 1, 2]], [0, [1, 1, 2], [2, 0, 0]], [0, [1, 1, 2], [0, 2, 0]], [0, [1, 1, 2], [0, 0, 2]], [0, [1, 1, 0], [2, 2, 0]], [0, [1, 1, 0], [2, 0, 2]], [0, [1, 1, 0], [0, 2, 2]], [0, [1, 0, 2], [2, 1, 0]], [0, [1, 0, 2], [2, 0, 1]], [0, [1, 0, 2], [1, 2, 0]], [0, [1, 0, 2], [1, 0, 2]], [0, [1, 0, 2], [0, 2, 1]], [0, [1, 0, 2], [0, 1, 2]], [0, [1, 0, 1], [2, 2, 0]], [0, [1, 0, 1], [2, 0, 2]], [0, [1, 0, 1], [0, 2, 2]], [0, [1, 0, 0], [2, 2, 1]], [0, [1, 0, 0], [2, 1, 2]], [0, [1, 0, 0], [1, 2, 2]], [0, [0, 2, 2], [1, 1, 0]], [0, [0, 2, 2], [1, 0, 1]], [0, [0, 2, 2], [0, 1, 1]], [0, [0, 2, 1], [2, 1, 0]], [0, [0, 2, 1], [2, 0, 1]], [0, [0, 2, 1], [1, 2, 0]], [0, [0, 2, 1], [1, 0, 2]], [0, [0, 2, 1], [0, 2, 1]], [0, [0, 2, 1], [0, 1, 2]], [0, [0, 2, 0], [2, 1, 1]], [0, [0, 2, 0], [1, 2, 1]], [0, [0, 2, 0], [1, 1, 2]], [0, [0, 1, 2], [2, 1, 0]], [0, [0, 1, 2], [2, 0, 1]], [0, [0, 1, 2], [1, 2, 0]], [0, [0, 1, 2], [1, 0, 2]], [0, [0, 1, 2], [0, 2, 1]], [0, [0, 1, 2], [0, 1, 2]], [0, [0, 1, 1], [2, 2, 0]], [0, [0, 1, 1], [2, 0, 2]], [0, [0, 1, 1], [0, 2, 2]], [0, [0, 1, 0], [2, 2, 1]], [0, [0, 1, 0], [2, 1, 2]], [0, [0, 1, 0], [1, 2, 2]], [0, [0, 0, 2], [2, 1, 1]], [0, [0, 0, 2], [1, 2, 1]], [0, [0, 0, 2], [1, 1, 2]], [0, [0, 0, 1], [2, 2, 1]], [0, [0, 0, 1], [2, 1, 2]], [0, [0, 0, 1], [1, 2, 2]], [2, [2, 2, 1], [0, 0, 0]], [2, [2, 2, 0], [1, 0, 0]], [2, [2, 2, 0], [0, 1, 0]], [2, [2, 2, 0], [0, 0, 1]], [2, [2, 1, 2], [0, 0, 0]], [2, [2, 1, 0], [2, 0, 0]], [2, [2, 1, 0], [0, 2, 0]], [2, [2, 1, 0], [0, 0, 2]], [2, [2, 0, 2], [1, 0, 0]], [2, [2, 0, 2], [0, 1, 0]], [2, [2, 0, 2], [0, 0, 1]], [2, [2, 0, 1], [2, 0, 0]], [2, [2, 0, 1], [0, 2, 0]], [2, [2, 0, 1], [0, 0, 2]], [2, [2, 0, 0], [2, 1, 0]], [2, [2, 0, 0], [2, 0, 1]], [2, [2, 0, 0], [1, 2, 0]], [2, [2, 0, 0], [1, 0, 2]], [2, [2, 0, 0], [0, 2, 1]], [2, [2, 0, 0], [0, 1, 2]], [2, [1, 2, 2], [0, 0, 0]], [2, [1, 2, 0], [2, 0, 0]], [2, [1, 2, 0], [0, 2, 0]], [2, [1, 2, 0], [0, 0, 2]], [2, [1, 0, 2], [2, 0, 0]], [2, [1, 0, 2], [0, 2, 0]], [2, [1, 0, 2], [0, 0, 2]], [2, [1, 0, 0], [2, 2, 0]], [2, [1, 0, 0], [2, 0, 2]], [2, [1, 0, 0], [0, 2, 2]], [2, [0, 2, 2], [1, 0, 0]], [2, [0, 2, 2], [0, 1, 0]], [2, [0, 2, 2], [0, 0, 1]], [2, [0, 2, 1], [2, 0, 0]], [2, [0, 2, 1], [0, 2, 0]], [2, [0, 2, 1], [0, 0, 2]], [2, [0, 2, 0], [2, 1, 0]], [2, [0, 2, 0], [2, 0, 1]], [2, [0, 2, 0], [1, 2, 0]], [2, [0, 2, 0], [1, 0, 2]], [2, [0, 2, 0], [0, 2, 1]], [2, [0, 2, 0], [0, 1, 2]], [2, [0, 1, 2], [2, 0, 0]], [2, [0, 1, 2], [0, 2, 0]], [2, [0, 1, 2], [0, 0, 2]], [2, [0, 1, 0], [2, 2, 0]], [2, [0, 1, 0], [2, 0, 2]], [2, [0, 1, 0], [0, 2, 2]], [2, [0, 0, 2], [2, 1, 0]], [2, [0, 0, 2], [2, 0, 1]], [2, [0, 0, 2], [1, 2, 0]], [2, [0, 0, 2], [1, 0, 2]], [2, [0, 0, 2], [0, 2, 1]], [2, [0, 0, 2], [0, 1, 2]], [2, [0, 0, 1], [2, 2, 0]], [2, [0, 0, 1], [2, 0, 2]], [2, [0, 0, 1], [0, 2, 2]], [2, [0, 0, 0], [2, 2, 1]], [2, [0, 0, 0], [2, 1, 2]], [2, [0, 0, 0], [1, 2, 2]], [1, [2, 2, 2], [0, 0, 0]], [1, [2, 2, 0], [2, 0, 0]], [1, [2, 2, 0], [0, 2, 0]], [1, [2, 2, 0], [0, 0, 2]], [1, [2, 0, 2], [2, 0, 0]], [1, [2, 0, 2], [0, 2, 0]], [1, [2, 0, 2], [0, 0, 2]], [1, [2, 0, 0], [2, 2, 0]], [1, [2, 0, 0], [2, 0, 2]], [1, [2, 0, 0], [0, 2, 2]], [1, [0, 2, 2], [2, 0, 0]], [1, [0, 2, 2], [0, 2, 0]], [1, [0, 2, 2], [0, 0, 2]], [1, [0, 2, 0], [2, 2, 0]], [1, [0, 2, 0], [2, 0, 2]], [1, [0, 2, 0], [0, 2, 2]], [1, [0, 0, 2], [2, 2, 0]], [1, [0, 0, 2], [2, 0, 2]], [1, [0, 0, 2], [0, 2, 2]], [1, [0, 0, 0], [2, 2, 2]], [0, [2, 2, 2], [1, 0, 0]], [0, [2, 2, 2], [0, 1, 0]], [0, [2, 2, 2], [0, 0, 1]], [0, [2, 2, 1], [2, 0, 0]], [0, [2, 2, 1], [0, 2, 0]], [0, [2, 2, 1], [0, 0, 2]], [0, [2, 2, 0], [2, 1, 0]], [0, [2, 2, 0], [2, 0, 1]], [0, [2, 2, 0], [1, 2, 0]], [0, [2, 2, 0], [1, 0, 2]], [0, [2, 2, 0], [0, 2, 1]], [0, [2, 2, 0], [0, 1, 2]], [0, [2, 1, 2], [2, 0, 0]], [0, [2, 1, 2], [0, 2, 0]], [0, [2, 1, 2], [0, 0, 2]], [0, [2, 1, 0], [2, 2, 0]], [0, [2, 1, 0], [2, 0, 2]], [0, [2, 1, 0], [0, 2, 2]], [0, [2, 0, 2], [2, 1, 0]], [0, [2, 0, 2], [2, 0, 1]], [0, [2, 0, 2], [1, 2, 0]], [0, [2, 0, 2], [1, 0, 2]], [0, [2, 0, 2], [0, 2, 1]], [0, [2, 0, 2], [0, 1, 2]], [0, [2, 0, 1], [2, 2, 0]], [0, [2, 0, 1], [2, 0, 2]], [0, [2, 0, 1], [0, 2, 2]], [0, [2, 0, 0], [2, 2, 1]], [0, [2, 0, 0], [2, 1, 2]], [0, [2, 0, 0], [1, 2, 2]], [0, [1, 2, 2], [2, 0, 0]], [0, [1, 2, 2], [0, 2, 0]], [0, [1, 2, 2], [0, 0, 2]], [0, [1, 2, 0], [2, 2, 0]], [0, [1, 2, 0], [2, 0, 2]], [0, [1, 2, 0], [0, 2, 2]], [0, [1, 0, 2], [2, 2, 0]], [0, [1, 0, 2], [2, 0, 2]], [0, [1, 0, 2], [0, 2, 2]], [0, [1, 0, 0], [2, 2, 2]], [0, [0, 2, 2], [2, 1, 0]], [0, [0, 2, 2], [2, 0, 1]], [0, [0, 2, 2], [1, 2, 0]], [0, [0, 2, 2], [1, 0, 2]], [0, [0, 2, 2], [0, 2, 1]], [0, [0, 2, 2], [0, 1, 2]], [0, [0, 2, 1], [2, 2, 0]], [0, [0, 2, 1], [2, 0, 2]], [0, [0, 2, 1], [0, 2, 2]], [0, [0, 2, 0], [2, 2, 1]], [0, [0, 2, 0], [2, 1, 2]], [0, [0, 2, 0], [1, 2, 2]], [0, [0, 1, 2], [2, 2, 0]], [0, [0, 1, 2], [2, 0, 2]], [0, [0, 1, 2], [0, 2, 2]], [0, [0, 1, 0], [2, 2, 2]], [0, [0, 0, 2], [2, 2, 1]], [0, [0, 0, 2], [2, 1, 2]], [0, [0, 0, 2], [1, 2, 2]], [0, [0, 0, 1], [2, 2, 2]], [2, [2, 2, 2], [0, 0, 0]], [2, [2, 2, 0], [2, 0, 0]], [2, [2, 2, 0], [0, 2, 0]], [2, [2, 2, 0], [0, 0, 2]], [2, [2, 0, 2], [2, 0, 0]], [2, [2, 0, 2], [0, 2, 0]], [2, [2, 0, 2], [0, 0, 2]], [2, [2, 0, 0], [2, 2, 0]], [2, [2, 0, 0], [2, 0, 2]], [2, [2, 0, 0], [0, 2, 2]], [2, [0, 2, 2], [2, 0, 0]], [2, [0, 2, 2], [0, 2, 0]], [2, [0, 2, 2], [0, 0, 2]], [2, [0, 2, 0], [2, 2, 0]], [2, [0, 2, 0], [2, 0, 2]], [2, [0, 2, 0], [0, 2, 2]], [2, [0, 0, 2], [2, 2, 0]], [2, [0, 0, 2], [2, 0, 2]], [2, [0, 0, 2], [0, 2, 2]], [2, [0, 0, 0], [2, 2, 2]], [0, [2, 2, 2], [2, 0, 0]], [0, [2, 2, 2], [0, 2, 0]], [0, [2, 2, 2], [0, 0, 2]], [0, [2, 2, 0], [2, 2, 0]], [0, [2, 2, 0], [2, 0, 2]], [0, [2, 2, 0], [0, 2, 2]], [0, [2, 0, 2], [2, 2, 0]], [0, [2, 0, 2], [2, 0, 2]], [0, [2, 0, 2], [0, 2, 2]], [0, [2, 0, 0], [2, 2, 2]], [0, [0, 2, 2], [2, 2, 0]], [0, [0, 2, 2], [2, 0, 2]], [0, [0, 2, 2], [0, 2, 2]], [0, [0, 2, 0], [2, 2, 2]], [0, [0, 0, 2], [2, 2, 2]], [2, [2, 2, 2], [2, 0, 0]], [2, [2, 2, 2], [0, 2, 0]], [2, [2, 2, 2], [0, 0, 2]], [2, [2, 2, 0], [2, 2, 0]], [2, [2, 2, 0], [2, 0, 2]], [2, [2, 2, 0], [0, 2, 2]], [2, [2, 0, 2], [2, 2, 0]], [2, [2, 0, 2], [2, 0, 2]], [2, [2, 0, 2], [0, 2, 2]], [2, [2, 0, 0], [2, 2, 2]], [2, [0, 2, 2], [2, 2, 0]], [2, [0, 2, 2], [2, 0, 2]], [2, [0, 2, 2], [0, 2, 2]], [2, [0, 2, 0], [2, 2, 2]], [2, [0, 0, 2], [2, 2, 2]], [0, [2, 2, 2], [2, 2, 0]], [0, [2, 2, 2], [2, 0, 2]], [0, [2, 2, 2], [0, 2, 2]], [0, [2, 2, 0], [2, 2, 2]], [0, [2, 0, 2], [2, 2, 2]], [0, [0, 2, 2], [2, 2, 2]], [1, [1, 1, 1], [1, 0, 0]], [1, [1, 1, 1], [0, 1, 0]], [1, [1, 1, 1], [0, 0, 1]], [1, [1, 1, 0], [1, 1, 0]], [1, [1, 1, 0], [1, 0, 1]], [1, [1, 1, 0], [0, 1, 1]], [1, [1, 0, 1], [1, 1, 0]], [1, [1, 0, 1], [1, 0, 1]], [1, [1, 0, 1], [0, 1, 1]], [1, [1, 0, 0], [1, 1, 1]], [1, [0, 1, 1], [1, 1, 0]], [1, [0, 1, 1], [1, 0, 1]], [1, [0, 1, 1], [0, 1, 1]], [1, [0, 1, 0], [1, 1, 1]], [1, [0, 0, 1], [1, 1, 1]], [0, [1, 1, 1], [1, 1, 0]], [0, [1, 1, 1], [1, 0, 1]], [0, [1, 1, 1], [0, 1, 1]], [0, [1, 1, 0], [1, 1, 1]], [0, [1, 0, 1], [1, 1, 1]], [0, [0, 1, 1], [1, 1, 1]], [2, [1, 1, 1], [1, 0, 0]], [2, [1, 1, 1], [0, 1, 0]], [2, [1, 1, 1], [0, 0, 1]], [2, [1, 1, 0], [1, 1, 0]], [2, [1, 1, 0], [1, 0, 1]], [2, [1, 1, 0], [0, 1, 1]], [2, [1, 0, 1], [1, 1, 0]], [2, [1, 0, 1], [1, 0, 1]], [2, [1, 0, 1], [0, 1, 1]], [2, [1, 0, 0], [1, 1, 1]], [2, [0, 1, 1], [1, 1, 0]], [2, [0, 1, 1], [1, 0, 1]], [2, [0, 1, 1], [0, 1, 1]], [2, [0, 1, 0], [1, 1, 1]], [2, [0, 0, 1], [1, 1, 1]], [1, [2, 1, 1], [1, 0, 0]], [1, [2, 1, 1], [0, 1, 0]], [1, [2, 1, 1], [0, 0, 1]], [1, [2, 1, 0], [1, 1, 0]], [1, [2, 1, 0], [1, 0, 1]], [1, [2, 1, 0], [0, 1, 1]], [1, [2, 0, 1], [1, 1, 0]], [1, [2, 0, 1], [1, 0, 1]], [1, [2, 0, 1], [0, 1, 1]], [1, [2, 0, 0], [1, 1, 1]], [1, [1, 2, 1], [1, 0, 0]], [1, [1, 2, 1], [0, 1, 0]], [1, [1, 2, 1], [0, 0, 1]], [1, [1, 2, 0], [1, 1, 0]], [1, [1, 2, 0], [1, 0, 1]], [1, [1, 2, 0], [0, 1, 1]], [1, [1, 1, 2], [1, 0, 0]], [1, [1, 1, 2], [0, 1, 0]], [1, [1, 1, 2], [0, 0, 1]], [1, [1, 1, 1], [2, 0, 0]], [1, [1, 1, 1], [0, 2, 0]], [1, [1, 1, 1], [0, 0, 2]], [1, [1, 1, 0], [2, 1, 0]], [1, [1, 1, 0], [2, 0, 1]], [1, [1, 1, 0], [1, 2, 0]], [1, [1, 1, 0], [1, 0, 2]], [1, [1, 1, 0], [0, 2, 1]], [1, [1, 1, 0], [0, 1, 2]], [1, [1, 0, 2], [1, 1, 0]], [1, [1, 0, 2], [1, 0, 1]], [1, [1, 0, 2], [0, 1, 1]], [1, [1, 0, 1], [2, 1, 0]], [1, [1, 0, 1], [2, 0, 1]], [1, [1, 0, 1], [1, 2, 0]], [1, [1, 0, 1], [1, 0, 2]], [1, [1, 0, 1], [0, 2, 1]], [1, [1, 0, 1], [0, 1, 2]], [1, [1, 0, 0], [2, 1, 1]], [1, [1, 0, 0], [1, 2, 1]], [1, [1, 0, 0], [1, 1, 2]], [1, [0, 2, 1], [1, 1, 0]], [1, [0, 2, 1], [1, 0, 1]], [1, [0, 2, 1], [0, 1, 1]], [1, [0, 2, 0], [1, 1, 1]], [1, [0, 1, 2], [1, 1, 0]], [1, [0, 1, 2], [1, 0, 1]], [1, [0, 1, 2], [0, 1, 1]], [1, [0, 1, 1], [2, 1, 0]], [1, [0, 1, 1], [2, 0, 1]], [1, [0, 1, 1], [1, 2, 0]], [1, [0, 1, 1], [1, 0, 2]], [1, [0, 1, 1], [0, 2, 1]], [1, [0, 1, 1], [0, 1, 2]], [1, [0, 1, 0], [2, 1, 1]], [1, [0, 1, 0], [1, 2, 1]], [1, [0, 1, 0], [1, 1, 2]], [1, [0, 0, 2], [1, 1, 1]], [1, [0, 0, 1], [2, 1, 1]], [1, [0, 0, 1], [1, 2, 1]], [1, [0, 0, 1], [1, 1, 2]], [0, [2, 1, 1], [1, 1, 0]], [0, [2, 1, 1], [1, 0, 1]], [0, [2, 1, 1], [0, 1, 1]], [0, [2, 1, 0], [1, 1, 1]], [0, [2, 0, 1], [1, 1, 1]], [0, [1, 2, 1], [1, 1, 0]], [0, [1, 2, 1], [1, 0, 1]], [0, [1, 2, 1], [0, 1, 1]], [0, [1, 2, 0], [1, 1, 1]], [0, [1, 1, 2], [1, 1, 0]], [0, [1, 1, 2], [1, 0, 1]], [0, [1, 1, 2], [0, 1, 1]], [0, [1, 1, 1], [2, 1, 0]], [0, [1, 1, 1], [2, 0, 1]], [0, [1, 1, 1], [1, 2, 0]], [0, [1, 1, 1], [1, 0, 2]], [0, [1, 1, 1], [0, 2, 1]], [0, [1, 1, 1], [0, 1, 2]], [0, [1, 1, 0], [2, 1, 1]], [0, [1, 1, 0], [1, 2, 1]], [0, [1, 1, 0], [1, 1, 2]], [0, [1, 0, 2], [1, 1, 1]], [0, [1, 0, 1], [2, 1, 1]], [0, [1, 0, 1], [1, 2, 1]], [0, [1, 0, 1], [1, 1, 2]], [0, [0, 2, 1], [1, 1, 1]], [0, [0, 1, 2], [1, 1, 1]], [0, [0, 1, 1], [2, 1, 1]], [0, [0, 1, 1], [1, 2, 1]], [0, [0, 1, 1], [1, 1, 2]], [2, [2, 1, 1], [1, 0, 0]], [2, [2, 1, 1], [0, 1, 0]], [2, [2, 1, 1], [0, 0, 1]], [2, [2, 1, 0], [1, 1, 0]], [2, [2, 1, 0], [1, 0, 1]], [2, [2, 1, 0], [0, 1, 1]], [2, [2, 0, 1], [1, 1, 0]], [2, [2, 0, 1], [1, 0, 1]], [2, [2, 0, 1], [0, 1, 1]], [2, [2, 0, 0], [1, 1, 1]], [2, [1, 2, 1], [1, 0, 0]], [2, [1, 2, 1], [0, 1, 0]], [2, [1, 2, 1], [0, 0, 1]], [2, [1, 2, 0], [1, 1, 0]], [2, [1, 2, 0], [1, 0, 1]], [2, [1, 2, 0], [0, 1, 1]], [2, [1, 1, 2], [1, 0, 0]], [2, [1, 1, 2], [0, 1, 0]], [2, [1, 1, 2], [0, 0, 1]], [2, [1, 1, 1], [2, 0, 0]], [2, [1, 1, 1], [0, 2, 0]], [2, [1, 1, 1], [0, 0, 2]], [2, [1, 1, 0], [2, 1, 0]], [2, [1, 1, 0], [2, 0, 1]], [2, [1, 1, 0], [1, 2, 0]], [2, [1, 1, 0], [1, 0, 2]], [2, [1, 1, 0], [0, 2, 1]], [2, [1, 1, 0], [0, 1, 2]], [2, [1, 0, 2], [1, 1, 0]], [2, [1, 0, 2], [1, 0, 1]], [2, [1, 0, 2], [0, 1, 1]], [2, [1, 0, 1], [2, 1, 0]], [2, [1, 0, 1], [2, 0, 1]], [2, [1, 0, 1], [1, 2, 0]], [2, [1, 0, 1], [1, 0, 2]], [2, [1, 0, 1], [0, 2, 1]], [2, [1, 0, 1], [0, 1, 2]], [2, [1, 0, 0], [2, 1, 1]], [2, [1, 0, 0], [1, 2, 1]], [2, [1, 0, 0], [1, 1, 2]], [2, [0, 2, 1], [1, 1, 0]], [2, [0, 2, 1], [1, 0, 1]], [2, [0, 2, 1], [0, 1, 1]], [2, [0, 2, 0], [1, 1, 1]], [2, [0, 1, 2], [1, 1, 0]], [2, [0, 1, 2], [1, 0, 1]], [2, [0, 1, 2], [0, 1, 1]], [2, [0, 1, 1], [2, 1, 0]], [2, [0, 1, 1], [2, 0, 1]], [2, [0, 1, 1], [1, 2, 0]], [2, [0, 1, 1], [1, 0, 2]], [2, [0, 1, 1], [0, 2, 1]], [2, [0, 1, 1], [0, 1, 2]], [2, [0, 1, 0], [2, 1, 1]], [2, [0, 1, 0], [1, 2, 1]], [2, [0, 1, 0], [1, 1, 2]], [2, [0, 0, 2], [1, 1, 1]], [2, [0, 0, 1], [2, 1, 1]], [2, [0, 0, 1], [1, 2, 1]], [2, [0, 0, 1], [1, 1, 2]], [1, [2, 2, 1], [1, 0, 0]], [1, [2, 2, 1], [0, 1, 0]], [1, [2, 2, 1], [0, 0, 1]], [1, [2, 2, 0], [1, 1, 0]], [1, [2, 2, 0], [1, 0, 1]], [1, [2, 2, 0], [0, 1, 1]], [1, [2, 1, 2], [1, 0, 0]], [1, [2, 1, 2], [0, 1, 0]], [1, [2, 1, 2], [0, 0, 1]], [1, [2, 1, 1], [2, 0, 0]], [1, [2, 1, 1], [0, 2, 0]], [1, [2, 1, 1], [0, 0, 2]], [1, [2, 1, 0], [2, 1, 0]], [1, [2, 1, 0], [2, 0, 1]], [1, [2, 1, 0], [1, 2, 0]], [1, [2, 1, 0], [1, 0, 2]], [1, [2, 1, 0], [0, 2, 1]], [1, [2, 1, 0], [0, 1, 2]], [1, [2, 0, 2], [1, 1, 0]], [1, [2, 0, 2], [1, 0, 1]], [1, [2, 0, 2], [0, 1, 1]], [1, [2, 0, 1], [2, 1, 0]], [1, [2, 0, 1], [2, 0, 1]], [1, [2, 0, 1], [1, 2, 0]], [1, [2, 0, 1], [1, 0, 2]], [1, [2, 0, 1], [0, 2, 1]], [1, [2, 0, 1], [0, 1, 2]], [1, [2, 0, 0], [2, 1, 1]], [1, [2, 0, 0], [1, 2, 1]], [1, [2, 0, 0], [1, 1, 2]], [1, [1, 2, 2], [1, 0, 0]], [1, [1, 2, 2], [0, 1, 0]], [1, [1, 2, 2], [0, 0, 1]], [1, [1, 2, 1], [2, 0, 0]], [1, [1, 2, 1], [0, 2, 0]], [1, [1, 2, 1], [0, 0, 2]], [1, [1, 2, 0], [2, 1, 0]], [1, [1, 2, 0], [2, 0, 1]], [1, [1, 2, 0], [1, 2, 0]], [1, [1, 2, 0], [1, 0, 2]], [1, [1, 2, 0], [0, 2, 1]], [1, [1, 2, 0], [0, 1, 2]], [1, [1, 1, 2], [2, 0, 0]], [1, [1, 1, 2], [0, 2, 0]], [1, [1, 1, 2], [0, 0, 2]], [1, [1, 1, 0], [2, 2, 0]], [1, [1, 1, 0], [2, 0, 2]], [1, [1, 1, 0], [0, 2, 2]], [1, [1, 0, 2], [2, 1, 0]], [1, [1, 0, 2], [2, 0, 1]], [1, [1, 0, 2], [1, 2, 0]], [1, [1, 0, 2], [1, 0, 2]], [1, [1, 0, 2], [0, 2, 1]], [1, [1, 0, 2], [0, 1, 2]], [1, [1, 0, 1], [2, 2, 0]], [1, [1, 0, 1], [2, 0, 2]], [1, [1, 0, 1], [0, 2, 2]], [1, [1, 0, 0], [2, 2, 1]], [1, [1, 0, 0], [2, 1, 2]], [1, [1, 0, 0], [1, 2, 2]], [1, [0, 2, 2], [1, 1, 0]], [1, [0, 2, 2], [1, 0, 1]], [1, [0, 2, 2], [0, 1, 1]], [1, [0, 2, 1], [2, 1, 0]], [1, [0, 2, 1], [2, 0, 1]], [1, [0, 2, 1], [1, 2, 0]], [1, [0, 2, 1], [1, 0, 2]], [1, [0, 2, 1], [0, 2, 1]], [1, [0, 2, 1], [0, 1, 2]], [1, [0, 2, 0], [2, 1, 1]], [1, [0, 2, 0], [1, 2, 1]], [1, [0, 2, 0], [1, 1, 2]], [1, [0, 1, 2], [2, 1, 0]], [1, [0, 1, 2], [2, 0, 1]], [1, [0, 1, 2], [1, 2, 0]], [1, [0, 1, 2], [1, 0, 2]], [1, [0, 1, 2], [0, 2, 1]], [1, [0, 1, 2], [0, 1, 2]], [1, [0, 1, 1], [2, 2, 0]], [1, [0, 1, 1], [2, 0, 2]], [1, [0, 1, 1], [0, 2, 2]], [1, [0, 1, 0], [2, 2, 1]], [1, [0, 1, 0], [2, 1, 2]], [1, [0, 1, 0], [1, 2, 2]], [1, [0, 0, 2], [2, 1, 1]], [1, [0, 0, 2], [1, 2, 1]], [1, [0, 0, 2], [1, 1, 2]], [1, [0, 0, 1], [2, 2, 1]], [1, [0, 0, 1], [2, 1, 2]], [1, [0, 0, 1], [1, 2, 2]], [0, [2, 2, 1], [1, 1, 0]], [0, [2, 2, 1], [1, 0, 1]], [0, [2, 2, 1], [0, 1, 1]], [0, [2, 2, 0], [1, 1, 1]], [0, [2, 1, 2], [1, 1, 0]], [0, [2, 1, 2], [1, 0, 1]], [0, [2, 1, 2], [0, 1, 1]], [0, [2, 1, 1], [2, 1, 0]], [0, [2, 1, 1], [2, 0, 1]], [0, [2, 1, 1], [1, 2, 0]], [0, [2, 1, 1], [1, 0, 2]], [0, [2, 1, 1], [0, 2, 1]], [0, [2, 1, 1], [0, 1, 2]], [0, [2, 1, 0], [2, 1, 1]], [0, [2, 1, 0], [1, 2, 1]], [0, [2, 1, 0], [1, 1, 2]], [0, [2, 0, 2], [1, 1, 1]], [0, [2, 0, 1], [2, 1, 1]], [0, [2, 0, 1], [1, 2, 1]], [0, [2, 0, 1], [1, 1, 2]], [0, [1, 2, 2], [1, 1, 0]], [0, [1, 2, 2], [1, 0, 1]], [0, [1, 2, 2], [0, 1, 1]], [0, [1, 2, 1], [2, 1, 0]], [0, [1, 2, 1], [2, 0, 1]], [0, [1, 2, 1], [1, 2, 0]], [0, [1, 2, 1], [1, 0, 2]], [0, [1, 2, 1], [0, 2, 1]], [0, [1, 2, 1], [0, 1, 2]], [0, [1, 2, 0], [2, 1, 1]], [0, [1, 2, 0], [1, 2, 1]], [0, [1, 2, 0], [1, 1, 2]], [0, [1, 1, 2], [2, 1, 0]], [0, [1, 1, 2], [2, 0, 1]], [0, [1, 1, 2], [1, 2, 0]], [0, [1, 1, 2], [1, 0, 2]], [0, [1, 1, 2], [0, 2, 1]], [0, [1, 1, 2], [0, 1, 2]], [0, [1, 1, 1], [2, 2, 0]], [0, [1, 1, 1], [2, 0, 2]], [0, [1, 1, 1], [0, 2, 2]], [0, [1, 1, 0], [2, 2, 1]], [0, [1, 1, 0], [2, 1, 2]], [0, [1, 1, 0], [1, 2, 2]], [0, [1, 0, 2], [2, 1, 1]], [0, [1, 0, 2], [1, 2, 1]], [0, [1, 0, 2], [1, 1, 2]], [0, [1, 0, 1], [2, 2, 1]], [0, [1, 0, 1], [2, 1, 2]], [0, [1, 0, 1], [1, 2, 2]], [0, [0, 2, 2], [1, 1, 1]], [0, [0, 2, 1], [2, 1, 1]], [0, [0, 2, 1], [1, 2, 1]], [0, [0, 2, 1], [1, 1, 2]], [0, [0, 1, 2], [2, 1, 1]], [0, [0, 1, 2], [1, 2, 1]], [0, [0, 1, 2], [1, 1, 2]], [0, [0, 1, 1], [2, 2, 1]], [0, [0, 1, 1], [2, 1, 2]], [0, [0, 1, 1], [1, 2, 2]], [2, [2, 2, 1], [1, 0, 0]], [2, [2, 2, 1], [0, 1, 0]], [2, [2, 2, 1], [0, 0, 1]], [2, [2, 2, 0], [1, 1, 0]], [2, [2, 2, 0], [1, 0, 1]], [2, [2, 2, 0], [0, 1, 1]], [2, [2, 1, 2], [1, 0, 0]], [2, [2, 1, 2], [0, 1, 0]], [2, [2, 1, 2], [0, 0, 1]], [2, [2, 1, 1], [2, 0, 0]], [2, [2, 1, 1], [0, 2, 0]], [2, [2, 1, 1], [0, 0, 2]], [2, [2, 1, 0], [2, 1, 0]], [2, [2, 1, 0], [2, 0, 1]], [2, [2, 1, 0], [1, 2, 0]], [2, [2, 1, 0], [1, 0, 2]], [2, [2, 1, 0], [0, 2, 1]], [2, [2, 1, 0], [0, 1, 2]], [2, [2, 0, 2], [1, 1, 0]], [2, [2, 0, 2], [1, 0, 1]], [2, [2, 0, 2], [0, 1, 1]], [2, [2, 0, 1], [2, 1, 0]], [2, [2, 0, 1], [2, 0, 1]], [2, [2, 0, 1], [1, 2, 0]], [2, [2, 0, 1], [1, 0, 2]], [2, [2, 0, 1], [0, 2, 1]], [2, [2, 0, 1], [0, 1, 2]], [2, [2, 0, 0], [2, 1, 1]], [2, [2, 0, 0], [1, 2, 1]], [2, [2, 0, 0], [1, 1, 2]], [2, [1, 2, 2], [1, 0, 0]], [2, [1, 2, 2], [0, 1, 0]], [2, [1, 2, 2], [0, 0, 1]], [2, [1, 2, 1], [2, 0, 0]], [2, [1, 2, 1], [0, 2, 0]], [2, [1, 2, 1], [0, 0, 2]], [2, [1, 2, 0], [2, 1, 0]], [2, [1, 2, 0], [2, 0, 1]], [2, [1, 2, 0], [1, 2, 0]], [2, [1, 2, 0], [1, 0, 2]], [2, [1, 2, 0], [0, 2, 1]], [2, [1, 2, 0], [0, 1, 2]], [2, [1, 1, 2], [2, 0, 0]], [2, [1, 1, 2], [0, 2, 0]], [2, [1, 1, 2], [0, 0, 2]], [2, [1, 1, 0], [2, 2, 0]], [2, [1, 1, 0], [2, 0, 2]], [2, [1, 1, 0], [0, 2, 2]], [2, [1, 0, 2], [2, 1, 0]], [2, [1, 0, 2], [2, 0, 1]], [2, [1, 0, 2], [1, 2, 0]], [2, [1, 0, 2], [1, 0, 2]], [2, [1, 0, 2], [0, 2, 1]], [2, [1, 0, 2], [0, 1, 2]], [2, [1, 0, 1], [2, 2, 0]], [2, [1, 0, 1], [2, 0, 2]], [2, [1, 0, 1], [0, 2, 2]], [2, [1, 0, 0], [2, 2, 1]], [2, [1, 0, 0], [2, 1, 2]], [2, [1, 0, 0], [1, 2, 2]], [2, [0, 2, 2], [1, 1, 0]], [2, [0, 2, 2], [1, 0, 1]], [2, [0, 2, 2], [0, 1, 1]], [2, [0, 2, 1], [2, 1, 0]], [2, [0, 2, 1], [2, 0, 1]], [2, [0, 2, 1], [1, 2, 0]], [2, [0, 2, 1], [1, 0, 2]], [2, [0, 2, 1], [0, 2, 1]], [2, [0, 2, 1], [0, 1, 2]], [2, [0, 2, 0], [2, 1, 1]], [2, [0, 2, 0], [1, 2, 1]], [2, [0, 2, 0], [1, 1, 2]], [2, [0, 1, 2], [2, 1, 0]], [2, [0, 1, 2], [2, 0, 1]], [2, [0, 1, 2], [1, 2, 0]], [2, [0, 1, 2], [1, 0, 2]], [2, [0, 1, 2], [0, 2, 1]], [2, [0, 1, 2], [0, 1, 2]], [2, [0, 1, 1], [2, 2, 0]], [2, [0, 1, 1], [2, 0, 2]], [2, [0, 1, 1], [0, 2, 2]], [2, [0, 1, 0], [2, 2, 1]], [2, [0, 1, 0], [2, 1, 2]], [2, [0, 1, 0], [1, 2, 2]], [2, [0, 0, 2], [2, 1, 1]], [2, [0, 0, 2], [1, 2, 1]], [2, [0, 0, 2], [1, 1, 2]], [2, [0, 0, 1], [2, 2, 1]], [2, [0, 0, 1], [2, 1, 2]], [2, [0, 0, 1], [1, 2, 2]], [1, [2, 2, 2], [1, 0, 0]], [1, [2, 2, 2], [0, 1, 0]], [1, [2, 2, 2], [0, 0, 1]], [1, [2, 2, 1], [2, 0, 0]], [1, [2, 2, 1], [0, 2, 0]], [1, [2, 2, 1], [0, 0, 2]], [1, [2, 2, 0], [2, 1, 0]], [1, [2, 2, 0], [2, 0, 1]], [1, [2, 2, 0], [1, 2, 0]], [1, [2, 2, 0], [1, 0, 2]], [1, [2, 2, 0], [0, 2, 1]], [1, [2, 2, 0], [0, 1, 2]], [1, [2, 1, 2], [2, 0, 0]], [1, [2, 1, 2], [0, 2, 0]], [1, [2, 1, 2], [0, 0, 2]], [1, [2, 1, 0], [2, 2, 0]], [1, [2, 1, 0], [2, 0, 2]], [1, [2, 1, 0], [0, 2, 2]], [1, [2, 0, 2], [2, 1, 0]], [1, [2, 0, 2], [2, 0, 1]], [1, [2, 0, 2], [1, 2, 0]], [1, [2, 0, 2], [1, 0, 2]], [1, [2, 0, 2], [0, 2, 1]], [1, [2, 0, 2], [0, 1, 2]], [1, [2, 0, 1], [2, 2, 0]], [1, [2, 0, 1], [2, 0, 2]], [1, [2, 0, 1], [0, 2, 2]], [1, [2, 0, 0], [2, 2, 1]], [1, [2, 0, 0], [2, 1, 2]], [1, [2, 0, 0], [1, 2, 2]], [1, [1, 2, 2], [2, 0, 0]], [1, [1, 2, 2], [0, 2, 0]], [1, [1, 2, 2], [0, 0, 2]], [1, [1, 2, 0], [2, 2, 0]], [1, [1, 2, 0], [2, 0, 2]], [1, [1, 2, 0], [0, 2, 2]], [1, [1, 0, 2], [2, 2, 0]], [1, [1, 0, 2], [2, 0, 2]], [1, [1, 0, 2], [0, 2, 2]], [1, [1, 0, 0], [2, 2, 2]], [1, [0, 2, 2], [2, 1, 0]], [1, [0, 2, 2], [2, 0, 1]], [1, [0, 2, 2], [1, 2, 0]], [1, [0, 2, 2], [1, 0, 2]], [1, [0, 2, 2], [0, 2, 1]], [1, [0, 2, 2], [0, 1, 2]], [1, [0, 2, 1], [2, 2, 0]], [1, [0, 2, 1], [2, 0, 2]], [1, [0, 2, 1], [0, 2, 2]], [1, [0, 2, 0], [2, 2, 1]], [1, [0, 2, 0], [2, 1, 2]], [1, [0, 2, 0], [1, 2, 2]], [1, [0, 1, 2], [2, 2, 0]], [1, [0, 1, 2], [2, 0, 2]], [1, [0, 1, 2], [0, 2, 2]], [1, [0, 1, 0], [2, 2, 2]], [1, [0, 0, 2], [2, 2, 1]], [1, [0, 0, 2], [2, 1, 2]], [1, [0, 0, 2], [1, 2, 2]], [1, [0, 0, 1], [2, 2, 2]], [0, [2, 2, 2], [1, 1, 0]], [0, [2, 2, 2], [1, 0, 1]], [0, [2, 2, 2], [0, 1, 1]], [0, [2, 2, 1], [2, 1, 0]], [0, [2, 2, 1], [2, 0, 1]], [0, [2, 2, 1], [1, 2, 0]], [0, [2, 2, 1], [1, 0, 2]], [0, [2, 2, 1], [0, 2, 1]], [0, [2, 2, 1], [0, 1, 2]], [0, [2, 2, 0], [2, 1, 1]], [0, [2, 2, 0], [1, 2, 1]], [0, [2, 2, 0], [1, 1, 2]], [0, [2, 1, 2], [2, 1, 0]], [0, [2, 1, 2], [2, 0, 1]], [0, [2, 1, 2], [1, 2, 0]], [0, [2, 1, 2], [1, 0, 2]], [0, [2, 1, 2], [0, 2, 1]], [0, [2, 1, 2], [0, 1, 2]], [0, [2, 1, 1], [2, 2, 0]], [0, [2, 1, 1], [2, 0, 2]], [0, [2, 1, 1], [0, 2, 2]], [0, [2, 1, 0], [2, 2, 1]], [0, [2, 1, 0], [2, 1, 2]], [0, [2, 1, 0], [1, 2, 2]], [0, [2, 0, 2], [2, 1, 1]], [0, [2, 0, 2], [1, 2, 1]], [0, [2, 0, 2], [1, 1, 2]], [0, [2, 0, 1], [2, 2, 1]], [0, [2, 0, 1], [2, 1, 2]], [0, [2, 0, 1], [1, 2, 2]], [0, [1, 2, 2], [2, 1, 0]], [0, [1, 2, 2], [2, 0, 1]], [0, [1, 2, 2], [1, 2, 0]], [0, [1, 2, 2], [1, 0, 2]], [0, [1, 2, 2], [0, 2, 1]], [0, [1, 2, 2], [0, 1, 2]], [0, [1, 2, 1], [2, 2, 0]], [0, [1, 2, 1], [2, 0, 2]], [0, [1, 2, 1], [0, 2, 2]], [0, [1, 2, 0], [2, 2, 1]], [0, [1, 2, 0], [2, 1, 2]], [0, [1, 2, 0], [1, 2, 2]], [0, [1, 1, 2], [2, 2, 0]], [0, [1, 1, 2], [2, 0, 2]], [0, [1, 1, 2], [0, 2, 2]], [0, [1, 1, 0], [2, 2, 2]], [0, [1, 0, 2], [2, 2, 1]], [0, [1, 0, 2], [2, 1, 2]], [0, [1, 0, 2], [1, 2, 2]], [0, [1, 0, 1], [2, 2, 2]], [0, [0, 2, 2], [2, 1, 1]], [0, [0, 2, 2], [1, 2, 1]], [0, [0, 2, 2], [1, 1, 2]], [0, [0, 2, 1], [2, 2, 1]], [0, [0, 2, 1], [2, 1, 2]], [0, [0, 2, 1], [1, 2, 2]], [0, [0, 1, 2], [2, 2, 1]], [0, [0, 1, 2], [2, 1, 2]], [0, [0, 1, 2], [1, 2, 2]], [0, [0, 1, 1], [2, 2, 2]], [2, [2, 2, 2], [1, 0, 0]], [2, [2, 2, 2], [0, 1, 0]], [2, [2, 2, 2], [0, 0, 1]], [2, [2, 2, 1], [2, 0, 0]], [2, [2, 2, 1], [0, 2, 0]], [2, [2, 2, 1], [0, 0, 2]], [2, [2, 2, 0], [2, 1, 0]], [2, [2, 2, 0], [2, 0, 1]], [2, [2, 2, 0], [1, 2, 0]], [2, [2, 2, 0], [1, 0, 2]], [2, [2, 2, 0], [0, 2, 1]], [2, [2, 2, 0], [0, 1, 2]], [2, [2, 1, 2], [2, 0, 0]], [2, [2, 1, 2], [0, 2, 0]], [2, [2, 1, 2], [0, 0, 2]], [2, [2, 1, 0], [2, 2, 0]], [2, [2, 1, 0], [2, 0, 2]], [2, [2, 1, 0], [0, 2, 2]], [2, [2, 0, 2], [2, 1, 0]], [2, [2, 0, 2], [2, 0, 1]], [2, [2, 0, 2], [1, 2, 0]], [2, [2, 0, 2], [1, 0, 2]], [2, [2, 0, 2], [0, 2, 1]], [2, [2, 0, 2], [0, 1, 2]], [2, [2, 0, 1], [2, 2, 0]], [2, [2, 0, 1], [2, 0, 2]], [2, [2, 0, 1], [0, 2, 2]], [2, [2, 0, 0], [2, 2, 1]], [2, [2, 0, 0], [2, 1, 2]], [2, [2, 0, 0], [1, 2, 2]], [2, [1, 2, 2], [2, 0, 0]], [2, [1, 2, 2], [0, 2, 0]], [2, [1, 2, 2], [0, 0, 2]], [2, [1, 2, 0], [2, 2, 0]], [2, [1, 2, 0], [2, 0, 2]], [2, [1, 2, 0], [0, 2, 2]], [2, [1, 0, 2], [2, 2, 0]], [2, [1, 0, 2], [2, 0, 2]], [2, [1, 0, 2], [0, 2, 2]], [2, [1, 0, 0], [2, 2, 2]], [2, [0, 2, 2], [2, 1, 0]], [2, [0, 2, 2], [2, 0, 1]], [2, [0, 2, 2], [1, 2, 0]], [2, [0, 2, 2], [1, 0, 2]], [2, [0, 2, 2], [0, 2, 1]], [2, [0, 2, 2], [0, 1, 2]], [2, [0, 2, 1], [2, 2, 0]], [2, [0, 2, 1], [2, 0, 2]], [2, [0, 2, 1], [0, 2, 2]], [2, [0, 2, 0], [2, 2, 1]], [2, [0, 2, 0], [2, 1, 2]], [2, [0, 2, 0], [1, 2, 2]], [2, [0, 1, 2], [2, 2, 0]], [2, [0, 1, 2], [2, 0, 2]], [2, [0, 1, 2], [0, 2, 2]], [2, [0, 1, 0], [2, 2, 2]], [2, [0, 0, 2], [2, 2, 1]], [2, [0, 0, 2], [2, 1, 2]], [2, [0, 0, 2], [1, 2, 2]], [2, [0, 0, 1], [2, 2, 2]], [1, [2, 2, 2], [2, 0, 0]], [1, [2, 2, 2], [0, 2, 0]], [1, [2, 2, 2], [0, 0, 2]], [1, [2, 2, 0], [2, 2, 0]], [1, [2, 2, 0], [2, 0, 2]], [1, [2, 2, 0], [0, 2, 2]], [1, [2, 0, 2], [2, 2, 0]], [1, [2, 0, 2], [2, 0, 2]], [1, [2, 0, 2], [0, 2, 2]], [1, [2, 0, 0], [2, 2, 2]], [1, [0, 2, 2], [2, 2, 0]], [1, [0, 2, 2], [2, 0, 2]], [1, [0, 2, 2], [0, 2, 2]], [1, [0, 2, 0], [2, 2, 2]], [1, [0, 0, 2], [2, 2, 2]], [0, [2, 2, 2], [2, 1, 0]], [0, [2, 2, 2], [2, 0, 1]], [0, [2, 2, 2], [1, 2, 0]], [0, [2, 2, 2], [1, 0, 2]], [0, [2, 2, 2], [0, 2, 1]], [0, [2, 2, 2], [0, 1, 2]], [0, [2, 2, 1], [2, 2, 0]], [0, [2, 2, 1], [2, 0, 2]], [0, [2, 2, 1], [0, 2, 2]], [0, [2, 2, 0], [2, 2, 1]], [0, [2, 2, 0], [2, 1, 2]], [0, [2, 2, 0], [1, 2, 2]], [0, [2, 1, 2], [2, 2, 0]], [0, [2, 1, 2], [2, 0, 2]], [0, [2, 1, 2], [0, 2, 2]], [0, [2, 1, 0], [2, 2, 2]], [0, [2, 0, 2], [2, 2, 1]], [0, [2, 0, 2], [2, 1, 2]], [0, [2, 0, 2], [1, 2, 2]], [0, [2, 0, 1], [2, 2, 2]], [0, [1, 2, 2], [2, 2, 0]], [0, [1, 2, 2], [2, 0, 2]], [0, [1, 2, 2], [0, 2, 2]], [0, [1, 2, 0], [2, 2, 2]], [0, [1, 0, 2], [2, 2, 2]], [0, [0, 2, 2], [2, 2, 1]], [0, [0, 2, 2], [2, 1, 2]], [0, [0, 2, 2], [1, 2, 2]], [0, [0, 2, 1], [2, 2, 2]], [0, [0, 1, 2], [2, 2, 2]], [2, [2, 2, 2], [2, 0, 0]], [2, [2, 2, 2], [0, 2, 0]], [2, [2, 2, 2], [0, 0, 2]], [2, [2, 2, 0], [2, 2, 0]], [2, [2, 2, 0], [2, 0, 2]], [2, [2, 2, 0], [0, 2, 2]], [2, [2, 0, 2], [2, 2, 0]], [2, [2, 0, 2], [2, 0, 2]], [2, [2, 0, 2], [0, 2, 2]], [2, [2, 0, 0], [2, 2, 2]], [2, [0, 2, 2], [2, 2, 0]], [2, [0, 2, 2], [2, 0, 2]], [2, [0, 2, 2], [0, 2, 2]], [2, [0, 2, 0], [2, 2, 2]], [2, [0, 0, 2], [2, 2, 2]], [0, [2, 2, 2], [2, 2, 0]], [0, [2, 2, 2], [2, 0, 2]], [0, [2, 2, 2], [0, 2, 2]], [0, [2, 2, 0], [2, 2, 2]], [0, [2, 0, 2], [2, 2, 2]], [0, [0, 2, 2], [2, 2, 2]], [2, [2, 2, 2], [2, 2, 0]], [2, [2, 2, 2], [2, 0, 2]], [2, [2, 2, 2], [0, 2, 2]], [2, [2, 2, 0], [2, 2, 2]], [2, [2, 0, 2], [2, 2, 2]], [2, [0, 2, 2], [2, 2, 2]], [0, [2, 2, 2], [2, 2, 2]], [1, [1, 1, 1], [1, 1, 0]], [1, [1, 1, 1], [1, 0, 1]], [1, [1, 1, 1], [0, 1, 1]], [1, [1, 1, 0], [1, 1, 1]], [1, [1, 0, 1], [1, 1, 1]], [1, [0, 1, 1], [1, 1, 1]], [0, [1, 1, 1], [1, 1, 1]], [2, [1, 1, 1], [1, 1, 0]], [2, [1, 1, 1], [1, 0, 1]], [2, [1, 1, 1], [0, 1, 1]], [2, [1, 1, 0], [1, 1, 1]], [2, [1, 0, 1], [1, 1, 1]], [2, [0, 1, 1], [1, 1, 1]], [1, [2, 1, 1], [1, 1, 0]], [1, [2, 1, 1], [1, 0, 1]], [1, [2, 1, 1], [0, 1, 1]], [1, [2, 1, 0], [1, 1, 1]], [1, [2, 0, 1], [1, 1, 1]], [1, [1, 2, 1], [1, 1, 0]], [1, [1, 2, 1], [1, 0, 1]], [1, [1, 2, 1], [0, 1, 1]], [1, [1, 2, 0], [1, 1, 1]], [1, [1, 1, 2], [1, 1, 0]], [1, [1, 1, 2], [1, 0, 1]], [1, [1, 1, 2], [0, 1, 1]], [1, [1, 1, 1], [2, 1, 0]], [1, [1, 1, 1], [2, 0, 1]], [1, [1, 1, 1], [1, 2, 0]], [1, [1, 1, 1], [1, 0, 2]], [1, [1, 1, 1], [0, 2, 1]], [1, [1, 1, 1], [0, 1, 2]], [1, [1, 1, 0], [2, 1, 1]], [1, [1, 1, 0], [1, 2, 1]], [1, [1, 1, 0], [1, 1, 2]], [1, [1, 0, 2], [1, 1, 1]], [1, [1, 0, 1], [2, 1, 1]], [1, [1, 0, 1], [1, 2, 1]], [1, [1, 0, 1], [1, 1, 2]], [1, [0, 2, 1], [1, 1, 1]], [1, [0, 1, 2], [1, 1, 1]], [1, [0, 1, 1], [2, 1, 1]], [1, [0, 1, 1], [1, 2, 1]], [1, [0, 1, 1], [1, 1, 2]], [0, [2, 1, 1], [1, 1, 1]], [0, [1, 2, 1], [1, 1, 1]], [0, [1, 1, 2], [1, 1, 1]], [0, [1, 1, 1], [2, 1, 1]], [0, [1, 1, 1], [1, 2, 1]], [0, [1, 1, 1], [1, 1, 2]], [2, [2, 1, 1], [1, 1, 0]], [2, [2, 1, 1], [1, 0, 1]], [2, [2, 1, 1], [0, 1, 1]], [2, [2, 1, 0], [1, 1, 1]], [2, [2, 0, 1], [1, 1, 1]], [2, [1, 2, 1], [1, 1, 0]], [2, [1, 2, 1], [1, 0, 1]], [2, [1, 2, 1], [0, 1, 1]], [2, [1, 2, 0], [1, 1, 1]], [2, [1, 1, 2], [1, 1, 0]], [2, [1, 1, 2], [1, 0, 1]], [2, [1, 1, 2], [0, 1, 1]], [2, [1, 1, 1], [2, 1, 0]], [2, [1, 1, 1], [2, 0, 1]], [2, [1, 1, 1], [1, 2, 0]], [2, [1, 1, 1], [1, 0, 2]], [2, [1, 1, 1], [0, 2, 1]], [2, [1, 1, 1], [0, 1, 2]], [2, [1, 1, 0], [2, 1, 1]], [2, [1, 1, 0], [1, 2, 1]], [2, [1, 1, 0], [1, 1, 2]], [2, [1, 0, 2], [1, 1, 1]], [2, [1, 0, 1], [2, 1, 1]], [2, [1, 0, 1], [1, 2, 1]], [2, [1, 0, 1], [1, 1, 2]], [2, [0, 2, 1], [1, 1, 1]], [2, [0, 1, 2], [1, 1, 1]], [2, [0, 1, 1], [2, 1, 1]], [2, [0, 1, 1], [1, 2, 1]], [2, [0, 1, 1], [1, 1, 2]], [1, [2, 2, 1], [1, 1, 0]], [1, [2, 2, 1], [1, 0, 1]], [1, [2, 2, 1], [0, 1, 1]], [1, [2, 2, 0], [1, 1, 1]], [1, [2, 1, 2], [1, 1, 0]], [1, [2, 1, 2], [1, 0, 1]], [1, [2, 1, 2], [0, 1, 1]], [1, [2, 1, 1], [2, 1, 0]], [1, [2, 1, 1], [2, 0, 1]], [1, [2, 1, 1], [1, 2, 0]], [1, [2, 1, 1], [1, 0, 2]], [1, [2, 1, 1], [0, 2, 1]], [1, [2, 1, 1], [0, 1, 2]], [1, [2, 1, 0], [2, 1, 1]], [1, [2, 1, 0], [1, 2, 1]], [1, [2, 1, 0], [1, 1, 2]], [1, [2, 0, 2], [1, 1, 1]], [1, [2, 0, 1], [2, 1, 1]], [1, [2, 0, 1], [1, 2, 1]], [1, [2, 0, 1], [1, 1, 2]], [1, [1, 2, 2], [1, 1, 0]], [1, [1, 2, 2], [1, 0, 1]], [1, [1, 2, 2], [0, 1, 1]], [1, [1, 2, 1], [2, 1, 0]], [1, [1, 2, 1], [2, 0, 1]], [1, [1, 2, 1], [1, 2, 0]], [1, [1, 2, 1], [1, 0, 2]], [1, [1, 2, 1], [0, 2, 1]], [1, [1, 2, 1], [0, 1, 2]], [1, [1, 2, 0], [2, 1, 1]], [1, [1, 2, 0], [1, 2, 1]], [1, [1, 2, 0], [1, 1, 2]], [1, [1, 1, 2], [2, 1, 0]], [1, [1, 1, 2], [2, 0, 1]], [1, [1, 1, 2], [1, 2, 0]], [1, [1, 1, 2], [1, 0, 2]], [1, [1, 1, 2], [0, 2, 1]], [1, [1, 1, 2], [0, 1, 2]], [1, [1, 1, 1], [2, 2, 0]], [1, [1, 1, 1], [2, 0, 2]], [1, [1, 1, 1], [0, 2, 2]], [1, [1, 1, 0], [2, 2, 1]], [1, [1, 1, 0], [2, 1, 2]], [1, [1, 1, 0], [1, 2, 2]], [1, [1, 0, 2], [2, 1, 1]], [1, [1, 0, 2], [1, 2, 1]], [1, [1, 0, 2], [1, 1, 2]], [1, [1, 0, 1], [2, 2, 1]], [1, [1, 0, 1], [2, 1, 2]], [1, [1, 0, 1], [1, 2, 2]], [1, [0, 2, 2], [1, 1, 1]], [1, [0, 2, 1], [2, 1, 1]], [1, [0, 2, 1], [1, 2, 1]], [1, [0, 2, 1], [1, 1, 2]], [1, [0, 1, 2], [2, 1, 1]], [1, [0, 1, 2], [1, 2, 1]], [1, [0, 1, 2], [1, 1, 2]], [1, [0, 1, 1], [2, 2, 1]], [1, [0, 1, 1], [2, 1, 2]], [1, [0, 1, 1], [1, 2, 2]], [0, [2, 2, 1], [1, 1, 1]], [0, [2, 1, 2], [1, 1, 1]], [0, [2, 1, 1], [2, 1, 1]], [0, [2, 1, 1], [1, 2, 1]], [0, [2, 1, 1], [1, 1, 2]], [0, [1, 2, 2], [1, 1, 1]], [0, [1, 2, 1], [2, 1, 1]], [0, [1, 2, 1], [1, 2, 1]], [0, [1, 2, 1], [1, 1, 2]], [0, [1, 1, 2], [2, 1, 1]], [0, [1, 1, 2], [1, 2, 1]], [0, [1, 1, 2], [1, 1, 2]], [0, [1, 1, 1], [2, 2, 1]], [0, [1, 1, 1], [2, 1, 2]], [0, [1, 1, 1], [1, 2, 2]], [2, [2, 2, 1], [1, 1, 0]], [2, [2, 2, 1], [1, 0, 1]], [2, [2, 2, 1], [0, 1, 1]], [2, [2, 2, 0], [1, 1, 1]], [2, [2, 1, 2], [1, 1, 0]], [2, [2, 1, 2], [1, 0, 1]], [2, [2, 1, 2], [0, 1, 1]], [2, [2, 1, 1], [2, 1, 0]], [2, [2, 1, 1], [2, 0, 1]], [2, [2, 1, 1], [1, 2, 0]], [2, [2, 1, 1], [1, 0, 2]], [2, [2, 1, 1], [0, 2, 1]], [2, [2, 1, 1], [0, 1, 2]], [2, [2, 1, 0], [2, 1, 1]], [2, [2, 1, 0], [1, 2, 1]], [2, [2, 1, 0], [1, 1, 2]], [2, [2, 0, 2], [1, 1, 1]], [2, [2, 0, 1], [2, 1, 1]], [2, [2, 0, 1], [1, 2, 1]], [2, [2, 0, 1], [1, 1, 2]], [2, [1, 2, 2], [1, 1, 0]], [2, [1, 2, 2], [1, 0, 1]], [2, [1, 2, 2], [0, 1, 1]], [2, [1, 2, 1], [2, 1, 0]], [2, [1, 2, 1], [2, 0, 1]], [2, [1, 2, 1], [1, 2, 0]], [2, [1, 2, 1], [1, 0, 2]], [2, [1, 2, 1], [0, 2, 1]], [2, [1, 2, 1], [0, 1, 2]], [2, [1, 2, 0], [2, 1, 1]], [2, [1, 2, 0], [1, 2, 1]], [2, [1, 2, 0], [1, 1, 2]], [2, [1, 1, 2], [2, 1, 0]], [2, [1, 1, 2], [2, 0, 1]], [2, [1, 1, 2], [1, 2, 0]], [2, [1, 1, 2], [1, 0, 2]], [2, [1, 1, 2], [0, 2, 1]], [2, [1, 1, 2], [0, 1, 2]], [2, [1, 1, 1], [2, 2, 0]], [2, [1, 1, 1], [2, 0, 2]], [2, [1, 1, 1], [0, 2, 2]], [2, [1, 1, 0], [2, 2, 1]], [2, [1, 1, 0], [2, 1, 2]], [2, [1, 1, 0], [1, 2, 2]], [2, [1, 0, 2], [2, 1, 1]], [2, [1, 0, 2], [1, 2, 1]], [2, [1, 0, 2], [1, 1, 2]], [2, [1, 0, 1], [2, 2, 1]], [2, [1, 0, 1], [2, 1, 2]], [2, [1, 0, 1], [1, 2, 2]], [2, [0, 2, 2], [1, 1, 1]], [2, [0, 2, 1], [2, 1, 1]], [2, [0, 2, 1], [1, 2, 1]], [2, [0, 2, 1], [1, 1, 2]], [2, [0, 1, 2], [2, 1, 1]], [2, [0, 1, 2], [1, 2, 1]], [2, [0, 1, 2], [1, 1, 2]], [2, [0, 1, 1], [2, 2, 1]], [2, [0, 1, 1], [2, 1, 2]], [2, [0, 1, 1], [1, 2, 2]], [1, [2, 2, 2], [1, 1, 0]], [1, [2, 2, 2], [1, 0, 1]], [1, [2, 2, 2], [0, 1, 1]], [1, [2, 2, 1], [2, 1, 0]], [1, [2, 2, 1], [2, 0, 1]], [1, [2, 2, 1], [1, 2, 0]], [1, [2, 2, 1], [1, 0, 2]], [1, [2, 2, 1], [0, 2, 1]], [1, [2, 2, 1], [0, 1, 2]], [1, [2, 2, 0], [2, 1, 1]], [1, [2, 2, 0], [1, 2, 1]], [1, [2, 2, 0], [1, 1, 2]], [1, [2, 1, 2], [2, 1, 0]], [1, [2, 1, 2], [2, 0, 1]], [1, [2, 1, 2], [1, 2, 0]], [1, [2, 1, 2], [1, 0, 2]], [1, [2, 1, 2], [0, 2, 1]], [1, [2, 1, 2], [0, 1, 2]], [1, [2, 1, 1], [2, 2, 0]], [1, [2, 1, 1], [2, 0, 2]], [1, [2, 1, 1], [0, 2, 2]], [1, [2, 1, 0], [2, 2, 1]], [1, [2, 1, 0], [2, 1, 2]], [1, [2, 1, 0], [1, 2, 2]], [1, [2, 0, 2], [2, 1, 1]], [1, [2, 0, 2], [1, 2, 1]], [1, [2, 0, 2], [1, 1, 2]], [1, [2, 0, 1], [2, 2, 1]], [1, [2, 0, 1], [2, 1, 2]], [1, [2, 0, 1], [1, 2, 2]], [1, [1, 2, 2], [2, 1, 0]], [1, [1, 2, 2], [2, 0, 1]], [1, [1, 2, 2], [1, 2, 0]], [1, [1, 2, 2], [1, 0, 2]], [1, [1, 2, 2], [0, 2, 1]], [1, [1, 2, 2], [0, 1, 2]], [1, [1, 2, 1], [2, 2, 0]], [1, [1, 2, 1], [2, 0, 2]], [1, [1, 2, 1], [0, 2, 2]], [1, [1, 2, 0], [2, 2, 1]], [1, [1, 2, 0], [2, 1, 2]], [1, [1, 2, 0], [1, 2, 2]], [1, [1, 1, 2], [2, 2, 0]], [1, [1, 1, 2], [2, 0, 2]], [1, [1, 1, 2], [0, 2, 2]], [1, [1, 1, 0], [2, 2, 2]], [1, [1, 0, 2], [2, 2, 1]], [1, [1, 0, 2], [2, 1, 2]], [1, [1, 0, 2], [1, 2, 2]], [1, [1, 0, 1], [2, 2, 2]], [1, [0, 2, 2], [2, 1, 1]], [1, [0, 2, 2], [1, 2, 1]], [1, [0, 2, 2], [1, 1, 2]], [1, [0, 2, 1], [2, 2, 1]], [1, [0, 2, 1], [2, 1, 2]], [1, [0, 2, 1], [1, 2, 2]], [1, [0, 1, 2], [2, 2, 1]], [1, [0, 1, 2], [2, 1, 2]], [1, [0, 1, 2], [1, 2, 2]], [1, [0, 1, 1], [2, 2, 2]], [0, [2, 2, 2], [1, 1, 1]], [0, [2, 2, 1], [2, 1, 1]], [0, [2, 2, 1], [1, 2, 1]], [0, [2, 2, 1], [1, 1, 2]], [0, [2, 1, 2], [2, 1, 1]], [0, [2, 1, 2], [1, 2, 1]], [0, [2, 1, 2], [1, 1, 2]], [0, [2, 1, 1], [2, 2, 1]], [0, [2, 1, 1], [2, 1, 2]], [0, [2, 1, 1], [1, 2, 2]], [0, [1, 2, 2], [2, 1, 1]], [0, [1, 2, 2], [1, 2, 1]], [0, [1, 2, 2], [1, 1, 2]], [0, [1, 2, 1], [2, 2, 1]], [0, [1, 2, 1], [2, 1, 2]], [0, [1, 2, 1], [1, 2, 2]], [0, [1, 1, 2], [2, 2, 1]], [0, [1, 1, 2], [2, 1, 2]], [0, [1, 1, 2], [1, 2, 2]], [0, [1, 1, 1], [2, 2, 2]], [2, [2, 2, 2], [1, 1, 0]], [2, [2, 2, 2], [1, 0, 1]], [2, [2, 2, 2], [0, 1, 1]], [2, [2, 2, 1], [2, 1, 0]], [2, [2, 2, 1], [2, 0, 1]], [2, [2, 2, 1], [1, 2, 0]], [2, [2, 2, 1], [1, 0, 2]], [2, [2, 2, 1], [0, 2, 1]], [2, [2, 2, 1], [0, 1, 2]], [2, [2, 2, 0], [2, 1, 1]], [2, [2, 2, 0], [1, 2, 1]], [2, [2, 2, 0], [1, 1, 2]], [2, [2, 1, 2], [2, 1, 0]], [2, [2, 1, 2], [2, 0, 1]], [2, [2, 1, 2], [1, 2, 0]], [2, [2, 1, 2], [1, 0, 2]], [2, [2, 1, 2], [0, 2, 1]], [2, [2, 1, 2], [0, 1, 2]], [2, [2, 1, 1], [2, 2, 0]], [2, [2, 1, 1], [2, 0, 2]], [2, [2, 1, 1], [0, 2, 2]], [2, [2, 1, 0], [2, 2, 1]], [2, [2, 1, 0], [2, 1, 2]], [2, [2, 1, 0], [1, 2, 2]], [2, [2, 0, 2], [2, 1, 1]], [2, [2, 0, 2], [1, 2, 1]], [2, [2, 0, 2], [1, 1, 2]], [2, [2, 0, 1], [2, 2, 1]], [2, [2, 0, 1], [2, 1, 2]], [2, [2, 0, 1], [1, 2, 2]], [2, [1, 2, 2], [2, 1, 0]], [2, [1, 2, 2], [2, 0, 1]], [2, [1, 2, 2], [1, 2, 0]], [2, [1, 2, 2], [1, 0, 2]], [2, [1, 2, 2], [0, 2, 1]], [2, [1, 2, 2], [0, 1, 2]], [2, [1, 2, 1], [2, 2, 0]], [2, [1, 2, 1], [2, 0, 2]], [2, [1, 2, 1], [0, 2, 2]], [2, [1, 2, 0], [2, 2, 1]], [2, [1, 2, 0], [2, 1, 2]], [2, [1, 2, 0], [1, 2, 2]], [2, [1, 1, 2], [2, 2, 0]], [2, [1, 1, 2], [2, 0, 2]], [2, [1, 1, 2], [0, 2, 2]], [2, [1, 1, 0], [2, 2, 2]], [2, [1, 0, 2], [2, 2, 1]], [2, [1, 0, 2], [2, 1, 2]], [2, [1, 0, 2], [1, 2, 2]], [2, [1, 0, 1], [2, 2, 2]], [2, [0, 2, 2], [2, 1, 1]], [2, [0, 2, 2], [1, 2, 1]], [2, [0, 2, 2], [1, 1, 2]], [2, [0, 2, 1], [2, 2, 1]], [2, [0, 2, 1], [2, 1, 2]], [2, [0, 2, 1], [1, 2, 2]], [2, [0, 1, 2], [2, 2, 1]], [2, [0, 1, 2], [2, 1, 2]], [2, [0, 1, 2], [1, 2, 2]], [2, [0, 1, 1], [2, 2, 2]], [1, [2, 2, 2], [2, 1, 0]], [1, [2, 2, 2], [2, 0, 1]], [1, [2, 2, 2], [1, 2, 0]], [1, [2, 2, 2], [1, 0, 2]], [1, [2, 2, 2], [0, 2, 1]], [1, [2, 2, 2], [0, 1, 2]], [1, [2, 2, 1], [2, 2, 0]], [1, [2, 2, 1], [2, 0, 2]], [1, [2, 2, 1], [0, 2, 2]], [1, [2, 2, 0], [2, 2, 1]], [1, [2, 2, 0], [2, 1, 2]], [1, [2, 2, 0], [1, 2, 2]], [1, [2, 1, 2], [2, 2, 0]], [1, [2, 1, 2], [2, 0, 2]], [1, [2, 1, 2], [0, 2, 2]], [1, [2, 1, 0], [2, 2, 2]], [1, [2, 0, 2], [2, 2, 1]], [1, [2, 0, 2], [2, 1, 2]], [1, [2, 0, 2], [1, 2, 2]], [1, [2, 0, 1], [2, 2, 2]], [1, [1, 2, 2], [2, 2, 0]], [1, [1, 2, 2], [2, 0, 2]], [1, [1, 2, 2], [0, 2, 2]], [1, [1, 2, 0], [2, 2, 2]], [1, [1, 0, 2], [2, 2, 2]], [1, [0, 2, 2], [2, 2, 1]], [1, [0, 2, 2], [2, 1, 2]], [1, [0, 2, 2], [1, 2, 2]], [1, [0, 2, 1], [2, 2, 2]], [1, [0, 1, 2], [2, 2, 2]], [0, [2, 2, 2], [2, 1, 1]], [0, [2, 2, 2], [1, 2, 1]], [0, [2, 2, 2], [1, 1, 2]], [0, [2, 2, 1], [2, 2, 1]], [0, [2, 2, 1], [2, 1, 2]], [0, [2, 2, 1], [1, 2, 2]], [0, [2, 1, 2], [2, 2, 1]], [0, [2, 1, 2], [2, 1, 2]], [0, [2, 1, 2], [1, 2, 2]], [0, [2, 1, 1], [2, 2, 2]], [0, [1, 2, 2], [2, 2, 1]], [0, [1, 2, 2], [2, 1, 2]], [0, [1, 2, 2], [1, 2, 2]], [0, [1, 2, 1], [2, 2, 2]], [0, [1, 1, 2], [2, 2, 2]], [2, [2, 2, 2], [2, 1, 0]], [2, [2, 2, 2], [2, 0, 1]], [2, [2, 2, 2], [1, 2, 0]], [2, [2, 2, 2], [1, 0, 2]], [2, [2, 2, 2], [0, 2, 1]], [2, [2, 2, 2], [0, 1, 2]], [2, [2, 2, 1], [2, 2, 0]], [2, [2, 2, 1], [2, 0, 2]], [2, [2, 2, 1], [0, 2, 2]], [2, [2, 2, 0], [2, 2, 1]], [2, [2, 2, 0], [2, 1, 2]], [2, [2, 2, 0], [1, 2, 2]], [2, [2, 1, 2], [2, 2, 0]], [2, [2, 1, 2], [2, 0, 2]], [2, [2, 1, 2], [0, 2, 2]], [2, [2, 1, 0], [2, 2, 2]], [2, [2, 0, 2], [2, 2, 1]], [2, [2, 0, 2], [2, 1, 2]], [2, [2, 0, 2], [1, 2, 2]], [2, [2, 0, 1], [2, 2, 2]], [2, [1, 2, 2], [2, 2, 0]], [2, [1, 2, 2], [2, 0, 2]], [2, [1, 2, 2], [0, 2, 2]], [2, [1, 2, 0], [2, 2, 2]], [2, [1, 0, 2], [2, 2, 2]], [2, [0, 2, 2], [2, 2, 1]], [2, [0, 2, 2], [2, 1, 2]], [2, [0, 2, 2], [1, 2, 2]], [2, [0, 2, 1], [2, 2, 2]], [2, [0, 1, 2], [2, 2, 2]], [1, [2, 2, 2], [2, 2, 0]], [1, [2, 2, 2], [2, 0, 2]], [1, [2, 2, 2], [0, 2, 2]], [1, [2, 2, 0], [2, 2, 2]], [1, [2, 0, 2], [2, 2, 2]], [1, [0, 2, 2], [2, 2, 2]], [0, [2, 2, 2], [2, 2, 1]], [0, [2, 2, 2], [2, 1, 2]], [0, [2, 2, 2], [1, 2, 2]], [0, [2, 2, 1], [2, 2, 2]], [0, [2, 1, 2], [2, 2, 2]], [0, [1, 2, 2], [2, 2, 2]], [2, [2, 2, 2], [2, 2, 0]], [2, [2, 2, 2], [2, 0, 2]], [2, [2, 2, 2], [0, 2, 2]], [2, [2, 2, 0], [2, 2, 2]], [2, [2, 0, 2], [2, 2, 2]], [2, [0, 2, 2], [2, 2, 2]], [0, [2, 2, 2], [2, 2, 2]], [2, [2, 2, 2], [2, 2, 2]]];
//console.log(annulusRuleArray[0].toString());
function AnulusRNGQu(dif, maxDif) {
	var tempVal12 = Math.floor(Math.random()*2)+1;
	var bool12 = false;
	var tempVal34 = Math.floor(Math.random()*2)+3;
	var bool34 = false;
	
	var temp = annulusRuleArray[Math.floor(dif/maxDif)];
	
	var result = [];
	
	if (temp[0] == 1) {
		result[0] = tempVal12;
		bool12 = true;
	} else if (temp[0] == 2) {
		result[0] = tempVal34;
		bool34 = true;
	} else { 
		result[0] = 0;
	}
	for (var x = 1; x < temp.length; x++) {
		result[x] = [];
		if (temp[x][0] == 1 && bool12) {
			result[x][0] = tempVal12;
			bool12 = !bool12;
		} else if (temp[x][0] == 1) {
			result[x][0] = 2-tempVal12+1;
		} else if (temp[x][0] == 2 && bool34) {
			result[x][0] = tempVal34;
			bool34 = !bool34;
		} else if (temp[x][0] == 2) {
			result[x][0] = 4-tempVal34+3;
		} else {
			result[x][0] = 0;
		}
		if (temp[x][1] == 1 && bool12) {
			result[x][1] = tempVal12;
			bool12 = !bool12;
		} else if (temp[x][1] == 1) {
			result[x][1] = 2-tempVal12+1;
		} else if (temp[x][1] == 2 && bool34) {
			result[x][1] = tempVal34;
			bool34 = !bool34;
		} else if (temp[x][1] == 2) {
			result[x][1] = 4-tempVal34+3;
		} else {
			result[x][1] = 0;
		}
		if (temp[x][2] == 1 && bool12) {
			result[x][2] = tempVal12;
			bool12 = !bool12;
		} else if (temp[x][2] == 1) {
			result[x][2] = 2-tempVal12+1;
		} else if (temp[x][2] == 2 && bool34) {
			result[x][2] = tempVal34;
			bool34 = !bool34;
		} else if (temp[x][2] == 2) {
			result[x][2] = 4-tempVal34+3;
		} else {
			result[x][2] = 0;
		}
	}
	return result;
}
//console.log("difficulty :: Anulus Qu");
//console.log(difficulty + " :: " + returnStringArray(AnulusRNGQu(difficulty)));
			
function AnulusRNGAns(rule, noAns) {	
	//console.log("AnulusRNGAns");
	//console.log("Difficulty: "+dif+" |  Rule: "+returnStringArray(rule));
	//console.log("Number of Answers: "+noAns);
	//
	// count possible non-anomalous answers
	var count = 0;
	if (rule[0])
		count++;
	for (var An = 1; An < rule.length; An++) {
		for (var y = 0; y < rule[An].length; y++) {
			if (rule[An][y]) {
				count++;
			}  
		}
	}
	//console.log("rule count: "+count);
	if (count == 0)
		var noAnomalies = noAns;
	else if (count == 1)
		var noAnomalies = noAns - 2;
	else if (count == 2)
		var noAnomalies = noAns -8;
	else
		var noAnomalies = 0;
	// count = 0: noA = noAns - 0
	// count = 1: noA = noAns - 2
	// count = 2: noA = noAns - 8
	// 1,1, 1,2, 2,1, 2,2, 0,1, 0,2, 1,0, 2,0
	
	// increase anomalous answers proportionally to difficulty
	//
	// maxDif = 10;
	// anomUpperBound = 0.6*MaxDif (inverted)
	// anulusUpperBound = 0.2*maxDif; // (inverted)
	noAnomalies = Math.max(/*Math.floor(noAns*((maxDif - anomUpperBound) - dif)/maxDif),*/ noAnomalies, 0);
	//console.log("noAnomalies: " + noAnomalies);

	// set tempArr to [0,[0,0,0]]
	// this is the default no anomalies, no rules yet.
	var tempArr = [];
	for (var y = 0; y < noAns; y++) {
		tempA = [];
		tempArr.push(tempA);
		tempArr[y].push(0);
		for (var An = 1; An < rule.length; An++) {
			tempA2 = [];
			tempArr[y].push(tempA2);
			for (var x = 0; x < rule[An].length; x++) {
				tempArr[y][An].push(0);
			}
		}
	}
	// MUST NOT BE ANY [0,[0,0,0]]s — Minimum necessary requirement for functioning
	// Frequency analysis stuff goes here
	// i.e. clues & anti-clues
	// Anomalies dealt with further down
	
	// next generate as if no anomalies, but incorporate the rules
	//
	// make a table of each possible permutation of 0,1,2 per rule.
	
	var ansTable = [];
	if (count) {
		var ansTable = [[0],[1],[2]];
		for (var z = 1; z < count; z++) {
			var tempOldLength = 0;
			for (var y = 0; y < 3; y++) {
				var tempLength = ansTable.length;
				for (var x = tempOldLength; x < tempLength; x++) {
					if (y < 2)
						ansTable.push(JSON.parse(JSON.stringify(ansTable[x])));
					ansTable[x].push(y);
					//console.log(returnStringArray(ansTable));
				}
				tempOldLength = tempLength;
			}
		}
	}
	//console.log("Initial ansTable:");
	//console.log(returnStringArray(ansTable));
	// Expand ansTable entries to fit the standard format
	if (!rule[0]) {
		for (var x = 0; x < ansTable.length; x++) {
			// add 0 to the beginning of the array
			ansTable[x].unshift(0);
		}
	}
	for (var An = 1; An < rule.length; An++) {
		for (var y = 0; y < rule[An].length; y++) {
			if (!rule[An][y]) {
				for (var x = 0; x < ansTable.length; x++) {
					// add 0 to pos y of the array
					ansTable[x].splice(1+(An-1)*rule[An].length+y, 0, 0);
				}
			}
		}
	}
	//console.log("Expanded ansTable:")
	//console.log(returnStringArray(ansTable));
	 	
	
	// adds in anomalies, which enables situations where ansTable.length < noAns, including Identity
	// and could allow for any other situation that calls for anomalies.
	if (ansTable.length != 0) {
		//var RNGAnomAdjust = Math.floor(Math.random()*(noAnomalies%ansTable.length));
		for (var x = 0; x < noAnomalies; x++) {
			var notUnique = true;
			var temploopcounter = 0;
			while (notUnique) {
				temploopcounter ++;
				// choose an item already in ansTable to 'edit'.
				tempAnom = JSON.parse(JSON.stringify(ansTable[Math.floor(Math.random()*ansTable.length)]));
				//console.log("tempAnom: "+tempAnom);
				// chooses an element to alter
				var tempAnomAlteredEle = Math.floor(Math.random()*tempAnom.length);
				//console.log("alteredEle: "+tempAnomAlteredEle)
				// Adds a single anomaly to that element.
				tempAnom[tempAnomAlteredEle] = Math.floor(Math.random()*2)+1;
				var tempChecker = true;
				for (var z = 0; z < ansTable.length; z++) {
					var tempbool = true;
					for (var m = 0; m < ansTable[z].length; m++) {
						if (ansTable[z][m] != tempAnom[m]) {
							tempbool = false;
							break;
						}
					}
					if (tempbool) {
						//console.log("tempbool"); 
						//console.log(returnStringArray(ansTable[z]));
						//console.log(returnStringArray(tempAnom));
						tempChecker = false;
						break;
					}
				}
				if (tempChecker) {
					ansTable.push(tempAnom);
					notUnique = false;	
				}
				if (temploopcounter > 150) {
					console.warn ("unique distractor generation failing; counter > "+temploopcounter);
					notUnique = true;
					break;
				}
			}
			
		}
	} else {
		for (var nA = 0; nA < noAnomalies; nA++) {
			var notUnique = true;
			var temploopcounter = 0;
			if (ansTable.length > 0) {
				while (notUnique) {
					temploopcounter ++;
					// choose the correct answer to 'edit'.
					var tALength = 1+(rule.length-1)*rule[1].length;
					var tempAnom = [];
					for (var x = 0; x < tALength; x++) {
						tempAnom.push(0);
					}
					// Adds a single anomaly to one element.
					tempAnom[Math.floor(Math.random()*tempAnom.length)] = Math.floor(Math.random()*2)+1;
					
					// check if this change is unique
					var tempChecker = true;
					for (var z = 0; z < ansTable.length; z++) {
						var tempbool = true;
						for (var m = 0; m < ansTable[z].length; m++) {
							if (ansTable[z][m] != tempAnom[m]) {
								tempbool = false;
								break;
							}
						}
						if (tempbool) {
							//console.log("tempbool"); 
							//console.log(returnStringArray(ansTable[z]));
							//console.log(returnStringArray(tempAnom));
							tempChecker = false;
							break;
						}
					}
					if (tempChecker) {
						ansTable.push(tempAnom);
						notUnique = false;	
					}
					if (temploopcounter > 150) {
						console.warn ("unique distractor generation failing (All distractors are anomalies); counter > "+temploopcounter);
						notUnique = true;
						break;
					}
				}
			} else {
				// choose the correct answer to 'edit'.
				var tALength = 1+(rule.length-1)*rule[1].length;
				var tempAnom = [];
				for (var x = 0; x < tALength; x++) {
					tempAnom.push(0);
				}
				// Adds a single anomaly to one element.
				tempAnom[Math.floor(Math.random()*tempAnom.length)] = Math.floor(Math.random()*2)+1;
				// push the anomaly
				ansTable.push(tempAnom);
			}
		}
		
	}
	//console.log("With Anom ansTable:")
	//console.log(returnStringArray(ansTable));
	// remove 0,0,0,0 (the correct answer);
	for (var x = 0; x < ansTable.length; x++) {
		var isAnswer = true;
		for (var y = 0; y < ansTable[x].length; y++) {
			if (ansTable[x][y])
				isAnswer = false;
		}
		if (isAnswer) {
			ansTable.splice(x, 1);
			break;
		}
	}
	//console.log("ansTable: "+ returnStringArray(ansTable));
	// Select noAns ans from ansTable.
	if (ansTable.length < noAns)
		console.warn ("ansTable shortness problem observed");
	
	// This handles situations where the ansTable.length > noAns
	var itemDistractors = [];
	// RNGAdjustment is at most just less than ansTable.length/noAns, as Math.random = 0 -> 0.99999...
	var RNGAdjustment = Math.random()*(ansTable.length/noAns);
	var increment = ansTable.length/noAns
	var tempDistVal = RNGAdjustment;
	//console.log("RNGAdjustments: "+RNGAdjustment);
	//console.log("tempDistVals:");
	for (var x = 0; x < noAns; x++) {
		// divide the length of ansTable by the number of answers.
		// multiply by x, and add the offset RNGAdjustment
		/*// Some examples:
		// ansTable.length = 8, noAns = 4
		// aT/nA = 8/2 = 1.99 - 0
		// 0,2,4,6
		// 1,3,5,7
		// 2,4,
		// ansTable.length = 7, noAns = 4
		// aT/nA = 7/4 = 1.749 - 0
		// 0, 1.75, 3.50, 5.25
		// 0,1,3,5
		// 1, 2.75, 4.5, 6.25
		// 1,2,4,6
		// 1.74, 3.49, 5.24, 6.99
		// 1,3,5,6
		
		// ansTable.length = 6, noAns = 4
		// aT/nA = 6/4 = 1.49 - 0
		// 0, 1.5, 3, 4.5
		// 1, 2.5, 4, 5.5
		// 
		// ansTable.length = 6, noAns = 3
		// 0,2,4
		// 1,3,5
		// ansTable.length = 6, noAns = 2
		// 0,3
		// 1,4
		// 2,5
		*/
		tempDistVal = RNGAdjustment+x*increment;
		//console.log(tempDistVal);
		var tempVal = Math.floor(tempDistVal);
		if (tempVal > ansTable.length) {
			tempVal = ansTable.length;
			console.warn("Overflow in itemDistractors");	
		}
		itemDistractors.push(tempVal);
	}
	//console.log("itemDistractors");
	//console.log(itemDistractors);
	
	// Construct final table & correct formatting
	var finalAnsTable = [];
	for (var i = 0; i < itemDistractors.length; i++) {
		var tempTableItemI = ansTable[itemDistractors[i]];
		var temp = [];
		finalAnsTable.push(temp);
		/*console.log("i: "+i);
		console.log("itemDistractors"+itemDistractors);
		console.log("iD[i]: "+ itemDistractors[i]);
		console.log(tempTableItemI[0]);
		console.log(returnStringArray(tempTableItemI));*/
		finalAnsTable[i][0] = tempTableItemI[0];
		for (var An = 1; An < rule.length; An++) {
			var temp2 = [];
			finalAnsTable[i].push(temp2);
		}
		for (var x = 1; x < tempTableItemI.length; x++) {
			finalAnsTable[i][Math.floor((x-1)/3)+1][(x-1)%3] = tempTableItemI[x];
		}
	}
	//console.log("difficulty :: finalAnsTable");
	/*
	// This is random generation with no duplicate false answer checking. It does however have duplicate answer checking.
	if (count != 0) {
		for (var a = 0; a < noAns; a++) {
			isIdentity = true;
			isIdentityLoopCounter = 0;
			while (isIdentity) {
				isIdentityLoopCounter++;
				//console.log("isIdentity loop: "+isIdentityLoopCounter); 
				if (rule[0]) {	
						// inserts a value of 0, 1 or 2, which are the three different possible values each element attribute can take.
						tempArr[a][0] = Math.floor(Math.random()*3);
					}
				for (var An = 1; An < rule.length; An++) {
					for (var x = 0; x < rule[An].length; x++) {
						if (rule[An][x]) {
								tempArr[a][An][x] = Math.floor(Math.random()*3);
						}
					}
				}
				if (tempArr[a][0])
					isIdentity = false;
				for (var An = 1; An < rule.length; An++) {
					for (var x = 0; x < rule[An].length; x++) {
						if (tempArr[a][An][x])
							isIdentity = false;
					}
				}
				if (isIdentityLoopCounter > 100) {
					console.warn("isIdentity loop is probably infinite");
					isIdentity = false;
					break;
				}
			}
		}
	} */
	
	return finalAnsTable;
}

//console.log("Difficulty: "+difficulty+ " | Rule: " + returnStringArray(AnulusRNGQu(difficulty))+ " | Distractor set: " + returnStringArray(AnulusRNGAns(AnulusRNGQu(difficulty), 3, difficulty)));

// Logic Gates (commutative)
// Example:
/*
					     [8],
					     [[1,1,1,0,1,0,0,0],
					      [0,0,0,1,1,1,1,1],
					      [0,0,1,0,1,0,1,0],
					      [0,1,0,0,1,1,0,0]],
					     [[1,0,0,1,0,0,0,1],
					      [0,0,0,0,0,0,0,1],
					      [1,0,1,0,0,1,0,0],
					      [1,0,1,1,0,1,0,0]], 
*/
// 4 - AND
// 5 - OR
// 6 - XOR
// 7 - XNOR (Not used in Ravens)
// >7 - Not Commutative/Not yet implemented

function CLGateRNGQu (noEle) {
	// noEle is the number of binary attributes used in this matrix.
	// Generate 2x2 matrix, from which the rest of the matrix is formed. 
	// This 2x2 matrix need not be the four top left elements, although in Raven's they would always be so.
	// These are instead always the four elements wich do not share a row or column with the missing answer.
	var tempQuArray = [];
	for (var x = 0; x < 4 /*(maxG-1)*(maxG-1)*/; x++) {
		tempArray1 = [];
		tempQuArray.push(tempArray1);
		for (var z = 0; z < noEle; z++) {
			tempQuArray[x].push(0);
		}
	}
	// The final array requires at least one of each of the following:
	// 0,0 -> w
	// 1,0 -> x
	// 0,1 -> y
	// 1,1 -> z
	// It would have at least one of all of these in both the rows and the columns.
	// thus the final array should be considered as four vertical pairs.
	// First-Second, First-third, Second-last, third-last.
	// the 'diagonals' need not be considered (first-last & second-third)
	// N.b. Technically this would be sufficient for non-commutative logic gates.
	//
	// This means the following are required (these requirements are orthogonal to the array):
	// [1,1,X,X]
	// [0,1,X,X]
	// [1,0,X,X]
	// [0,0,X,X]
	// [1,X,1,X]
	// [0,X,1,X]
	// [1,X,0,X]
	// [0,X,0,X]
	// [X,1,X,1]
	// [X,0,X,1]
	// [X,1,X,0]
	// [X,0,X,0]
	// [X,X,1,1]
	// [X,X,0,1]
	// [X,X,1,0]
	// [X,X,0,0]
	// The orthogonal pairs:
	var pairs = [[0,1],[0,2],[1,3],[2,3]];
	// The requirements:
	var required = [[1,1],[1,0],[0,1],[0,0]];
	// construction
	var tempEles = [];
	var tempValLeft = pairs.length*required.length%noEle;
	//console.log("tempValLeft: "+tempValLeft);
	var helpVal = Math.floor(noEle/tempValLeft);
	for (var x = 0; x < pairs.length*required.length; x++) {
		if (x > pairs.length*required.length-tempValLeft) {
			//console.log(x+" > "+(pairs.length*required.length-tempValLeft))
			tempEles.push(Math.floor(helpVal));
			helpVal += noEle/tempValLeft;
			if (helpVal > noEle) {
				helpVal -= noEle;
			}
			//console.log(helpVal);
		} else {
			tempEles.push(x%noEle);
		}
		//console.log(x);
		//console.log(tempEles);
	}
	// shuffles the location of the missing element
	shuffle(tempEles);
	//console.log(tempEles);
	//
	for (var p = 0; p < pairs.length; p++) {
		for (var r = 0; r < required.length; r++) {
			tempQuArray[pairs[p][0]][tempEles[p+r*pairs.length]] = required[r][0];
			tempQuArray[pairs[p][1]][tempEles[p+r*pairs.length]] = required[r][1];
		}
	}
	
	//console.log("tempQuArray: ");
	//console.log(returnStringArray(tempQuArray));
	return tempQuArray;
}
//
function CLGateRNGAns (rule, noEle, noAns, dif, maxDif) {
	// this is never identity
	// generate ansTable as all correct
	var ansTable = [];
	for (var x = 0; x < noAns; x++) {
		var tempArray = [];
		ansTable.push(tempArray);
		for (var y = 0; y < noEle; y++) {
			ansTable[x].push(0);
		}
	}
	// alter all distractors to be incorrect (no Anomalies)
	// this is way simpler than with Annuli, due to the fact 
	// that the matrix needs to have all possible combinations.
	var MAD = Math.ceil(noEle/2);
	var maxAnswerDelta = Math.max(MAD-MAD*dif/maxDif,1);
	//console.log("maxAnswerDelta: "+maxAnswerDelta);
	//console.log(returnStringArray(ansTable));
	for (var x = 0; x < ansTable.length; x++) {
		var answerDelta = Math.floor(Math.random()*maxAnswerDelta)+1;
		var RNGAdjust = Math.random()*(noEle/maxAnswerDelta);
		//console.log("RNGAdjust: "+RNGAdjust);
	//console.log("answerDelta: "+answerDelta);
		for (y = 0; y < answerDelta; y++) {
			if (Math.floor(noEle*y/answerDelta+RNGAdjust) > noEle) {
				console.warn("Help! complex thingy: "+Math.floor(noEle*y/answerDelta+RNGAdjust)+" > noEle: "+noEle);
			}
			ansTable[x][Math.floor(noEle*y/answerDelta+RNGAdjust)] = 1;
			
	//console.log(returnStringArray(ansTable));
		}
	}
	// if repeats, replace repeat with random unique
	var ansChecker = [];
	for (var i = 0; i < ansTable[0].length; i++) {
		ansChecker[i] = 0;
	}
	for (var x = 0; x < ansTable.length; x++) {
		for (var y = 0; y < ansTable.length; y++) {
			if (y != x && ansTable[x].toString() == ansTable[y].toString()) {
				var tempLoopCounter = 0;
				var replace = true;
				while (replace) {
					var unique = true;
					tempLoopCounter ++;
					var tempReplacement = [];
					for (var z = 0; z < ansTable[x].length; z++) {
						tempReplacement[z] = Math.floor(Math.random()*1.5);
					}
					if (tempReplacement.toString() == ansChecker.toString()) {
							unique = false;
					} else {
						for (var k = 0; k < ansTable.length; k++) {
							if (tempReplacement.toString() == ansTable[k].toString()) {
								unique = false;
							}
						}
					}
					if (unique) {
						ansTable[x] = tempReplacement;
						replace = false;
						break;
					}
					if (tempLoopCounter > 100) {
						console.warn("random replacement in LGate ansTable generation looping");
						replace = false;
						break;
					}
				}
			}
		}
	}
	//console.log(returnStringArray(ansTable));
	shuffle(ansTable);
	
	//console.log(returnStringArray(ansTable));
	return ansTable;
}
// 3 - ADD
	/* Example: 
					     [1],
					     [-9,6,
					      7,-2],
					     [2,3,1,-4,-5],*/ 
function AddRNGQu () {
	// 1 and 0 sometimes don't look as good. But that isn't a problem with this function per say - 
	// it's a problem with those graphical encodings.
	// 
	// It would however be better to resist having diagonal symmetry.
	//
	// Generate 2x2 matrix, from which the rest of the matrix is formed. 
	// This 2x2 matrix need not be the four top left elements, although in Raven's they would always be so.
	// These are instead always the four elements wich do not share a row or column with the missing answer.
	var tempQuArray = [];
	for (var x = 0; x < 4 /*(maxG-1)*(maxG-1)*/; x++) {
		tempQuArray.push(0);
	}
	// Each column, row and the combined total (also generally the answer) of all 4 elements must not exceed |9|.
	var combinedTotal = Math.floor(Math.random()*(9*2+1))-9; // 0 to 18 -9 = -9 to 9.
	var verti = [0];
	var horiz = [0];
	while (verti[0] == horiz[0] || verti[0] == Math.abs(combinedTotal) - horiz[0]) {
		verti[0] = Math.floor(Math.random()*(9+1)); // 0 to 9
		horiz[0] = Math.floor(Math.random()*(9+1));
	}
	if (combinedTotal < 0) {
		verti[0] = -verti[0];
		horiz[0] = -horiz[0];
	} else if (combinedTotal == 0) {
		// 0.5 chances
		if (Math.floor(Math.random()*2) == 0) {
			verti[0] = -verti[0];
		}
		if (Math.floor(Math.random()*2) == 0) {
			horiz[0] = -horiz[0];
		}
	} 
	verti[1] = combinedTotal - verti[0];
	horiz[1] = combinedTotal - horiz[0];
	
	// not 0 in top left. This might be worth changing when the graphical encoding improves.
	var allNotLessThanTen = true;
	var alTTCounter = 0;
	while (allNotLessThanTen) {
		var allLessThanTen = true;
		alTTCounter++;
		tempQuArray[0] = Math.floor(Math.random()*(9)+1);
	
		if (verti[0] < 0) {
			tempQuArray[0] = -tempQuArray[0];
		} else if (combinedTotal == 0) {
			// 0.5 chance
			if (Math.floor(Math.random()*2) == 0) {
				tempQuArray[0] = -tempQuArray[0];
			}
		} 
	
		tempQuArray[1] = verti[0]-tempQuArray[0];
		tempQuArray[2] = horiz[0]-tempQuArray[0];
		tempQuArray[3] = horiz[1]-tempQuArray[1];	
		for (var x = 0; x < tempQuArray.length; x++) {
			if (Math.abs(tempQuArray[x]) > 9) {
				allLessThanTen = false;
			}
		}
		if (allLessThanTen) {
			allNotLessThanTen = false;
			break;
		}
		if (alTTCounter > 100) {
			console.warn("Failed to generate an Add test item with all answers less than 10. alTTCounter: "+alTTCounter);
			allNotLessThanTen = false;
			break;
		}
	}	
	return tempQuArray;
}
function AddRNGAns (rule, noAns) {
	// answer is 0;
	var answer = 0;
	// absoluteAnswerVal
	var absoluteAnswerVal = rule[0]+rule[1]+rule[2]+rule[3];
	//console.log("ADD answer:");
	//console.log (answer);
	var ansTable = [];
	
	// tempOrigin = +/-(answer +/- 1 to 2), with a bias for results closer to answer.
	// Considering -answer to be a delta of 1, answer+1 a delta of 1, and -answer+1 a delta of 2.
	// tempOrigin != answer
	var tempOrigin = (answer+Math.floor(Math.random()*1.5+1)*(Math.floor(Math.random()*2)*2-1))*(-Math.floor(Math.random()*1.5)*2+1);
	var loopCounter = 0;
	while (ansTable.length < noAns) {
		var unique = true;
		// tempNewAns clouds around tempOrigin
		var tempNewAns = (tempOrigin+Math.floor(Math.random()*2.5)*(Math.floor(Math.random()*2)*2-1))*(-Math.floor(Math.random()*1.5)*2+1);
		// Modifies by 2-3, as this way the cloud behaves relatively sensibly at extremes.
		// 1-2, 1-3 and 3-4 produce worse clouds. Other ranges not checked.
		var subloop1 = 0;
		var subloop2 = 0;
		while ((tempNewAns+absoluteAnswerVal) > 9) {
			subloop1++;
			tempNewAns -= Math.floor(Math.random()*2)+2;
			if (subloop1 > 50) {
				console.warn("subloop1 broken");
				break;	
			}
		}
		while ((tempNewAns+absoluteAnswerVal) < -9) {
			subloop2++;
			tempNewAns += Math.floor(Math.random()*2)+2;
			if (subloop2 > 50) {
				console.warn("subloop2 broken");
				break;	
			}
		}
		//console.log(tempNewAns);
		if (answer == tempNewAns) {
				unique = false;
		} else {
			for (var y = 0; y < ansTable.length; y++) {
				if (ansTable[y] == tempNewAns) {
					unique = false;
					break;
				}
			}
		}
		if (unique) {
			ansTable.push(tempNewAns);
		}
		if (loopCounter > 100) {
			console.warn("ADD ansTable Loop exceeded bounds");
			break;
		}
	}
	
	return ansTable;
}
							//1
var allPuzzleTypes = [[[3,3],													// 0. [Grid Size]
					     [0],													// 1. [Graphic Options] // can only be 2 - at most???
					     [0],		 											// 2. [Logic Options]
					     [0,[0,0,0]],											// 3. [Layout]
					     [[0,[1,1,0]],[2,[2,0,0]],[1,[0,2,0]]],					// 4. [Answer Layout]
					     [0],													// 5. [Number of elements in centre]
					     [0,0,
					      0,0],													// 6. [Number Layout]
					     [0,0,0],												// 7. [Number Answer Layout]
					      0,													// 8. #Concealed
					      0],													// 9. Type
					      //2
					  [[3,3],
					     [0],
					     [2],
					     [1,[2,0,0]],
					     [[0,[0,1,0]],[1,[1,0,0]],[0,[2,0,0]]],
					     [0],
					     [0,0,
					      0,0],
					     [0,0,0],
					      0,
					      0],
					      //3
					  [[3,3],
					     [0],
					     [1],
					     [1,[2,2,0]],
					     [[0,[0,1,1]],[1,[1,1,0]],[0,[1,0,0]],[0,[0,1,0]]],
					     [0],
					     [0,0,
					      0,0],
					     [0,0,0,0],
					      0,
					      0],
					      //4
					  [[3,3],
					     [0],
					     [1],
					     [0,[2,0,1]],
					     [[0,[1,0,0]],[0,[2,0,0]],[1,[1,0,0]]],
					     [0],
					     [0,0,
					      0,0],
					     [0,0,0],
					      0,
					      0],
					      //5
					  [[3,3],
					     [0],
					     [1],
					     [1,[2,2,1],[2,0,1]],
					     [[1,[0,0,0],[0,0,1]],[2,[0,0,0],[0,0,0]],[0,[0,1,0],[0,0,0]],[0,[0,0,0],[0,0,2]]],
					     [0],
					     [0,0,
					      0,0],
					     [0,0,0,0],
					      0,
					      0],
					      //6
					  [[3,3],
					     [0],
					     [1],
					     [0,[0,4,3],[0,3,4]],
					     [[0,[0,0,1],[0,0,0]],[0,[0,0,0],[0,0,1]],[0,[0,0,0],[0,1,0]],[0,[0,1,0],[0,0,0]],[0,[0,0,2],[0,0,1]]],
					     [0],
					     [0,0,
					      0,0],
					     [0,0,0,0,0],
					      0,
					      0],
					      //7
					  [[3,3],
					     [6],
					     [5],
					     [0,[0,0,0]],
					     [[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]]],
					     [8],
					     [[0,0,0,1,0,0,0,1],
					      [0,0,1,0,0,0,1,0],
					      [0,1,0,0,0,1,0,0],
					      [1,0,0,1,1,1,0,0]],
					     [[1,0,0,0,0,0,0,0],
					      [0,0,0,0,0,0,0,1],
					      [0,0,0,1,0,0,0,0]],
					      0,
					      0],
					      //8
					  [[3,3],
					     [6],
					     [5],
					     [0,[0,0,0]],
					     [[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]]],
					     [10],
					     [[1,0,0,0,0,0,0,0,1,1],
					      [0,0,0,1,0,0,1,1,1,1],
					      [0,0,0,0,0,0,1,0,0,0],
					      [0,1,1,0,1,1,0,0,1,0]],
					     [[1,0,0,1,1,0,0,1,0,0],
					      [0,0,0,0,0,0,0,1,1,1],
					      [1,0,1,1,0,1,0,0,0,1],
					      [0,0,1,0,0,1,0,0,1,0],
					      [0,0,0,1,0,0,0,0,0,0]],
					      0,
					      0],
					      //9
					  [[3,3],
					     [6],
					     [6],
					     [0,[0,0,4]],
					     [[0,[0,0,1]],[0,[0,0,1]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]]],
					     [10],
					     [[0,1,0,0,1,1,0,1,1,0],
					      [0,0,0,1,0,1,0,1,0,0],
					      [1,1,0,0,0,1,0,1,0,0],
					      [0,1,0,1,1,1,0,0,0,1]],
					     [[0,0,0,0,0,1,0,0,0,0],
					      [1,0,1,0,0,0,0,0,0,0],
					      [0,0,0,1,0,0,0,0,1,1],
					      [1,0,1,0,0,0,0,1,0,0],
					      [1,0,0,0,0,0,0,0,1,0]],
					      0,
					      0],
					      //10
					  [[3,3],
					     [2],
					     [3],
					     [0,[0,0,0]],
					     [[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]]],
					     [1],
					     [-9,6,
					      7,-2],
					     [2,3,1,-4,-5],
					      0,
					      0]];
var logicOptionStringTranslate = ["Identity", "123", "112", "Add", "AND", "OR", "XOR", "XNOR"]
for (var x = 0; x < allPuzzleTypes.length; x++) {
	var dif = annulusRuleArray.length*x/allPuzzleTypes.length;
	// Identity
	if (allPuzzleTypes[x][2] == 0) {
		//allPuzzleTypes[x][3] = AnulusRNGQu(dif);
		var noAnsX = JSON.parse(JSON.stringify(allPuzzleTypes[x][4].length));
		allPuzzleTypes[x][4] = AnulusRNGAns(allPuzzleTypes[x][3], noAnsX);
		console.log("itemNo: "+x+" Logic Option: "+logicOptionStringTranslate[allPuzzleTypes[x][2]]+": Difficulty: "+dif+ " | Rule: " + returnStringArray(allPuzzleTypes[x][3])+ " | Distractor set: " + returnStringArray(allPuzzleTypes[x][4]));
	}
	// 123
	if (allPuzzleTypes[x][2] == 1) {
		allPuzzleTypes[x][3] = AnulusRNGQu(dif, allPuzzleTypes.length);
		var noAnsX = JSON.parse(JSON.stringify(allPuzzleTypes[x][4].length));
		allPuzzleTypes[x][4] = AnulusRNGAns(AnulusRNGQu(dif, allPuzzleTypes.length), noAnsX);
		console.log("itemNo: "+x+" Logic Option: "+logicOptionStringTranslate[allPuzzleTypes[x][2]]+": Difficulty: "+dif+ " | Rule: " + returnStringArray(allPuzzleTypes[x][3])+ " | Distractor set: " + returnStringArray(allPuzzleTypes[x][4]));
	}
	// 112
	if (allPuzzleTypes[x][2] == 2) {
		allPuzzleTypes[x][3] = AnulusRNGQu(dif, allPuzzleTypes.length);
		var noAnsX = JSON.parse(JSON.stringify(allPuzzleTypes[x][4].length));
		allPuzzleTypes[x][4] = AnulusRNGAns(AnulusRNGQu(dif, allPuzzleTypes.length), noAnsX);
		console.log("itemNo: "+x+" Logic Option: "+logicOptionStringTranslate[allPuzzleTypes[x][2]]+": Difficulty: "+dif+ " | Rule: " + returnStringArray(allPuzzleTypes[x][3])+ " | Distractor set: " + returnStringArray(allPuzzleTypes[x][4]));
	}
	// Addition
	if (allPuzzleTypes[x][2] == 3) {
		allPuzzleTypes[x][6] = AddRNGQu();
		var noAnsX = JSON.parse(JSON.stringify(allPuzzleTypes[x][4].length));
		allPuzzleTypes[x][7] = AddRNGAns(allPuzzleTypes[x][6],noAnsX);
		console.log("itemNo: "+x+" Logic Option: "+logicOptionStringTranslate[allPuzzleTypes[x][2]]+": Difficulty: "+dif+ " | Rule: " + returnStringArray(allPuzzleTypes[x][6])+ " | Answer: "+(allPuzzleTypes[x][6][0]+allPuzzleTypes[x][6][1]+allPuzzleTypes[x][6][2]+allPuzzleTypes[x][6][3])+ " | Distractor set: " + returnStringArray(allPuzzleTypes[x][7]));
	}
	// AND
	if (allPuzzleTypes[x][2] == 4) {
		allPuzzleTypes[x][6] = CLGateRNGQu(allPuzzleTypes[x][5]);
		var noAnsX = JSON.parse(JSON.stringify(allPuzzleTypes[x][4].length));
		allPuzzleTypes[x][7] = CLGateRNGAns(CLGateRNGQu(allPuzzleTypes[x][5]),allPuzzleTypes[x][5],noAnsX,x,allPuzzleTypes.length)
		console.log("itemNo: "+x+" Logic Option: "+logicOptionStringTranslate[allPuzzleTypes[x][2]]+": Difficulty: "+dif+ " | Rule: " + returnStringArray(allPuzzleTypes[x][6])+ " | Distractor set: " + returnStringArray(allPuzzleTypes[x][7]));
	}
	// OR
	if (allPuzzleTypes[x][2] == 5) {
		var noEle = allPuzzleTypes[x][5][0];
		allPuzzleTypes[x][6] = CLGateRNGQu(noEle);
		var noAnsX = JSON.parse(JSON.stringify(allPuzzleTypes[x][4].length));
		allPuzzleTypes[x][7] = CLGateRNGAns(CLGateRNGQu(noEle),noEle,noAnsX,x,allPuzzleTypes.length)
		console.log("itemNo: "+x+" Logic Option: "+logicOptionStringTranslate[allPuzzleTypes[x][2]]+": Difficulty: "+dif+ " | Rule: " + returnStringArray(allPuzzleTypes[x][6])+ " | Distractor set: " + returnStringArray(allPuzzleTypes[x][7]));
	}
	// XOR
	if (allPuzzleTypes[x][2] == 6) {
		var noEle = allPuzzleTypes[x][5][0];
		allPuzzleTypes[x][6] = CLGateRNGQu(noEle);
		var noAnsX = JSON.parse(JSON.stringify(allPuzzleTypes[x][4].length));
		allPuzzleTypes[x][7] = CLGateRNGAns(CLGateRNGQu(noEle),noEle,noAnsX,x,allPuzzleTypes.length)
		console.log("itemNo: "+x+" Logic Option: "+logicOptionStringTranslate[allPuzzleTypes[x][2]]+": Difficulty: "+dif+ " | Rule: " + returnStringArray(allPuzzleTypes[x][6])+ " | Distractor set: " + returnStringArray(allPuzzleTypes[x][7]));
	}
	// XNOR
	if (allPuzzleTypes[x][2] == 7) {
		var noEle = allPuzzleTypes[x][5][0];
		allPuzzleTypes[x][6] = CLGateRNGQu(noEle);
		var noAnsX = JSON.parse(JSON.stringify(allPuzzleTypes[x][4].length));
		allPuzzleTypes[x][7] = CLGateRNGAns(CLGateRNGQu(noEle),noEle,noAnsX,x,allPuzzleTypes.length)
		console.log("itemNo: "+x+" Logic Option: "+logicOptionStringTranslate[allPuzzleTypes[x][2]]+": Difficulty: "+dif+ " | Rule: " + returnStringArray(allPuzzleTypes[x][6])+ " | Distractor set: " + returnStringArray(allPuzzleTypes[x][7]));
	}
	// Unimplemented
	if (allPuzzleTypes[x][2] > 7) {
		console.warn("Isaac, what are you doing?");
		console.warn("itemNo: "+x+" not randomised yet:: " + allPuzzleTypes[x][2])
	}
}
for (var x = 0; x < allPuzzleTypes.length; x++) {
	if (allPuzzleTypes[x][5][0] == allPuzzleTypes[x][5][4] && allPuzzleTypes[x][5][1] == allPuzzleTypes[x][5][2]) {
		throw new Error("Initial numArray symmetric in the negative diagonal");
	}
}
//
/*var allMissingIcons = [0,
					   0,
					   0,
					   1,
					   1,
					   0,
					   2,
					   3,
					   0];*/
// One large uncertainty in the order of possibleLayouts is whether [threeOrFour()] is more 
// complex than [1,2] or not. Screen complexity vs puzzle complexity.
// For further uncertainties, see the 'Odd Ball' categories.
// 			
// Uses the format [Scale,[Colour, Form, Rotation],[Colour, Form, Rotation]]
// The outer annuli uses the first array [Colour, Form, Rotation], and the inner annulus uses the second array
// Scale is uniform across annuli
/*var shapeGridLayouts = [[0,[0,0,0]],
					  [0,[0,0,0]],
					  [0,[0,0,0]],				
					  [0,[0,2,3],[1,0,4]],
					  [3,[2,0,3]],
					  [3,[0,0,0],[0,0,1]],
					  [0,[3,1,0],[3,1,0]],				
					  [0,[0,4,1]],
					  [4,[0,0,3]]];*/
// Uses the same format as allGridLayouts - the correct answer, which would be [0,[0,0,0]], is added afterwards
// 0 is the correct answer for that attribute
// 1 & 2 are the two alternatives
/*var answerShapeArray = [
				   
				   [[0,[0,0,0]],[0,[0,0,0]],[0,[0,0,0]]],				
				   [[0,[2,0,0],[0,0,1]],[0,[0,0,0],[0,0,1]],[0,[2,0,0],[0,0,0]],[0,[0,0,0],[0,0,1]]],
				   [[1,[0,0,0]],[0,[0,1,0]],[2,[0,0,0]]],
				   [[0,[1,0,0],[0,0,0]],[0,[0,0,0],[0,0,1]],[2,[0,0,0],[0,0,0]]],
				   [[0,[1,0,0],[0,0,0]],[0,[2,0,0],[0,0,0]],[0,[0,1,0],[1,0,0]],[0,[0,1,0],[1,0,0]]],				
				   [[0,[0,0,1]],[0,[0,0,2]],[0,[0,3,1]],[0,[0,3,0]]],
				   [[2,[0,0,0]],[2,[0,0,0]],[0,[0,0,1]],[0,[0,0,0]],[0,[0,0,1]]]];
//
//
/*var numberGridLayouts = [[0,[1,3,5,2]],
						 [0,[1,-3,6,1]],
						 [0,[1,3,2,2]],
						 [0,[1,7,-1,2]],
						 [0,[6,1,-6,3]],
						 [0,[-5,3,8,1]],
						 [0,[-7,9,9,-1]],
						 [0,[-2,9,3,-8]],
						 [0,[-1,4,-5,2]]];*/
//
/*var answerNumberArray = [
						 [1,2,3],
						 [8,1,4],
						 [7,4,8,1,2],
						 [2,6,3],
						 [1,4,5,2],
						 [2,0,4,5],
						 [2,0,4,0],
						 [0,-1,-1,1,0]];
*/
//
//
/*if (allPuzzleTypes.length != allMissingIcons.length && 
			allMissingIcons.length != allGridLayouts.length && 
					allGridLayouts.length != answerArray.length) {
	console.warn("Data sets not all equal length");
}*/
// var allTestItems = [allPuzzleTypes,allMissingIcons,allGridLayouts,answerArray];
var maxDifficulty = allPuzzleTypes.length;
for (var x = 0; x < maxDifficulty; x++) {
	iconProperties[x] = "";
}